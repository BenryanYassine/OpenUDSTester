ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\ccxzgcer.s 			page 1


   1              		.cpu cortex-m0plus
   2              		.arch armv6s-m
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 6
  11              		.eabi_attribute 34, 0
  12              		.eabi_attribute 18, 4
  13              		.file	"stm32g0xx_hal_uart_ex.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.section	.rodata.CHANNEL_OFFSET_TAB,"a"
  18              		.align	2
  21              	CHANNEL_OFFSET_TAB:
  22 0000 081C3044 		.ascii	"\010\0340DXl\200"
  22      586C80
  23              		.section	.text.HAL_RS485Ex_Init,"ax",%progbits
  24              		.align	1
  25              		.global	HAL_RS485Ex_Init
  26              		.syntax unified
  27              		.code	16
  28              		.thumb_func
  30              	HAL_RS485Ex_Init:
  31              	.LFB363:
  32              		.file 1 "Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c"
   1:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c **** /**
   2:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****   ******************************************************************************
   3:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****   * @file    stm32g0xx_hal_uart_ex.c
   4:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****   * @author  MCD Application Team
   5:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****   * @brief   Extended UART HAL module driver.
   6:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****   *          This file provides firmware functions to manage the following extended
   7:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****   *          functionalities of the Universal Asynchronous Receiver Transmitter Peripheral (UART).
   8:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****   *           + Initialization and de-initialization functions
   9:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****   *           + Peripheral Control functions
  10:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****   *
  11:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****   *
  12:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****   ******************************************************************************
  13:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****   * @attention
  14:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****   *
  15:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****   * Copyright (c) 2018 STMicroelectronics.
  16:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****   * All rights reserved.
  17:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****   *
  18:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****   * This software is licensed under terms that can be found in the LICENSE file
  19:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****   * in the root directory of this software component.
  20:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****   * If no LICENSE file comes with this software, it is provided AS-IS.
  21:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****   *
  22:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****   ******************************************************************************
  23:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****   @verbatim
  24:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****   ==============================================================================
  25:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****                ##### UART peripheral extended features  #####
  26:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****   ==============================================================================
  27:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c **** 
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\ccxzgcer.s 			page 2


  28:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****     (#) Declare a UART_HandleTypeDef handle structure.
  29:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c **** 
  30:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****     (#) For the UART RS485 Driver Enable mode, initialize the UART registers
  31:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****         by calling the HAL_RS485Ex_Init() API.
  32:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c **** 
  33:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****     (#) FIFO mode enabling/disabling and RX/TX FIFO threshold programming.
  34:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c **** 
  35:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****         -@- When UART operates in FIFO mode, FIFO mode must be enabled prior
  36:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****             starting RX/TX transfers. Also RX/TX FIFO thresholds must be
  37:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****             configured prior starting RX/TX transfers.
  38:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c **** 
  39:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****   @endverbatim
  40:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****   ******************************************************************************
  41:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****   */
  42:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c **** 
  43:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c **** /* Includes ------------------------------------------------------------------*/
  44:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c **** #include "stm32g0xx_hal.h"
  45:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c **** 
  46:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c **** /** @addtogroup STM32G0xx_HAL_Driver
  47:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****   * @{
  48:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****   */
  49:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c **** 
  50:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c **** /** @defgroup UARTEx UARTEx
  51:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****   * @brief UART Extended HAL module driver
  52:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****   * @{
  53:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****   */
  54:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c **** 
  55:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c **** #ifdef HAL_UART_MODULE_ENABLED
  56:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c **** 
  57:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c **** /* Private typedef -----------------------------------------------------------*/
  58:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c **** /* Private define ------------------------------------------------------------*/
  59:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c **** /** @defgroup UARTEX_Private_Constants UARTEx Private Constants
  60:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****   * @{
  61:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****   */
  62:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c **** /* UART RX FIFO depth */
  63:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c **** #define RX_FIFO_DEPTH 8U
  64:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c **** 
  65:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c **** /* UART TX FIFO depth */
  66:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c **** #define TX_FIFO_DEPTH 8U
  67:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c **** /**
  68:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****   * @}
  69:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****   */
  70:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c **** 
  71:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c **** /* Private macros ------------------------------------------------------------*/
  72:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c **** /* Private variables ---------------------------------------------------------*/
  73:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c **** /* Private function prototypes -----------------------------------------------*/
  74:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c **** /** @defgroup UARTEx_Private_Functions UARTEx Private Functions
  75:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****   * @{
  76:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****   */
  77:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c **** static void UARTEx_Wakeup_AddressConfig(UART_HandleTypeDef *huart, UART_WakeUpTypeDef WakeUpSelecti
  78:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c **** static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart);
  79:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c **** /**
  80:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****   * @}
  81:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****   */
  82:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c **** 
  83:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c **** /* Exported functions --------------------------------------------------------*/
  84:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c **** 
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\ccxzgcer.s 			page 3


  85:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c **** /** @defgroup UARTEx_Exported_Functions  UARTEx Exported Functions
  86:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****   * @{
  87:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****   */
  88:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c **** 
  89:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c **** /** @defgroup UARTEx_Exported_Functions_Group1 Initialization and de-initialization functions
  90:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****   * @brief    Extended Initialization and Configuration Functions
  91:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****   *
  92:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c **** @verbatim
  93:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c **** ===============================================================================
  94:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****             ##### Initialization and Configuration functions #####
  95:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****  ===============================================================================
  96:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****     [..]
  97:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****     This subsection provides a set of functions allowing to initialize the USARTx or the UARTy
  98:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****     in asynchronous mode.
  99:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****       (+) For the asynchronous mode the parameters below can be configured:
 100:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****         (++) Baud Rate
 101:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****         (++) Word Length
 102:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****         (++) Stop Bit
 103:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****         (++) Parity: If the parity is enabled, then the MSB bit of the data written
 104:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****              in the data register is transmitted but is changed by the parity bit.
 105:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****         (++) Hardware flow control
 106:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****         (++) Receiver/transmitter modes
 107:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****         (++) Over Sampling Method
 108:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****         (++) One-Bit Sampling Method
 109:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****       (+) For the asynchronous mode, the following advanced features can be configured as well:
 110:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****         (++) TX and/or RX pin level inversion
 111:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****         (++) data logical level inversion
 112:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****         (++) RX and TX pins swap
 113:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****         (++) RX overrun detection disabling
 114:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****         (++) DMA disabling on RX error
 115:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****         (++) MSB first on communication line
 116:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****         (++) auto Baud rate detection
 117:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****     [..]
 118:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****     The HAL_RS485Ex_Init() API follows the UART RS485 mode configuration
 119:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****      procedures (details for the procedures are available in reference manual).
 120:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c **** 
 121:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c **** @endverbatim
 122:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c **** 
 123:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****   Depending on the frame length defined by the M1 and M0 bits (7-bit,
 124:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****   8-bit or 9-bit), the possible UART formats are listed in the
 125:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****   following table.
 126:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c **** 
 127:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****     Table 1. UART frame format.
 128:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****     +-----------------------------------------------------------------------+
 129:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****     |  M1 bit |  M0 bit |  PCE bit  |             UART frame                |
 130:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****     |---------|---------|-----------|---------------------------------------|
 131:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****     |    0    |    0    |    0      |    | SB |    8 bit data   | STB |     |
 132:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****     |---------|---------|-----------|---------------------------------------|
 133:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****     |    0    |    0    |    1      |    | SB | 7 bit data | PB | STB |     |
 134:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****     |---------|---------|-----------|---------------------------------------|
 135:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****     |    0    |    1    |    0      |    | SB |    9 bit data   | STB |     |
 136:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****     |---------|---------|-----------|---------------------------------------|
 137:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****     |    0    |    1    |    1      |    | SB | 8 bit data | PB | STB |     |
 138:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****     |---------|---------|-----------|---------------------------------------|
 139:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****     |    1    |    0    |    0      |    | SB |    7 bit data   | STB |     |
 140:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****     |---------|---------|-----------|---------------------------------------|
 141:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****     |    1    |    0    |    1      |    | SB | 6 bit data | PB | STB |     |
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\ccxzgcer.s 			page 4


 142:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****     +-----------------------------------------------------------------------+
 143:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c **** 
 144:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****   * @{
 145:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****   */
 146:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c **** 
 147:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c **** /**
 148:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****   * @brief Initialize the RS485 Driver enable feature according to the specified
 149:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****   *         parameters in the UART_InitTypeDef and creates the associated handle.
 150:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****   * @param huart            UART handle.
 151:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****   * @param Polarity         Select the driver enable polarity.
 152:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****   *          This parameter can be one of the following values:
 153:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****   *          @arg @ref UART_DE_POLARITY_HIGH DE signal is active high
 154:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****   *          @arg @ref UART_DE_POLARITY_LOW  DE signal is active low
 155:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****   * @param AssertionTime    Driver Enable assertion time:
 156:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****   *       5-bit value defining the time between the activation of the DE (Driver Enable)
 157:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****   *       signal and the beginning of the start bit. It is expressed in sample time
 158:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****   *       units (1/8 or 1/16 bit time, depending on the oversampling rate)
 159:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****   * @param DeassertionTime  Driver Enable deassertion time:
 160:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****   *       5-bit value defining the time between the end of the last stop bit, in a
 161:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****   *       transmitted message, and the de-activation of the DE (Driver Enable) signal.
 162:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****   *       It is expressed in sample time units (1/8 or 1/16 bit time, depending on the
 163:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****   *       oversampling rate).
 164:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****   * @retval HAL status
 165:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****   */
 166:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c **** HAL_StatusTypeDef HAL_RS485Ex_Init(UART_HandleTypeDef *huart, uint32_t Polarity, uint32_t Assertion
 167:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****                                    uint32_t DeassertionTime)
 168:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c **** {
  33              		.loc 1 168 1
  34              		.cfi_startproc
  35              		@ args = 0, pretend = 0, frame = 24
  36              		@ frame_needed = 1, uses_anonymous_args = 0
  37 0000 80B5     		push	{r7, lr}
  38              	.LCFI0:
  39              		.cfi_def_cfa_offset 8
  40              		.cfi_offset 7, -8
  41              		.cfi_offset 14, -4
  42 0002 86B0     		sub	sp, sp, #24
  43              	.LCFI1:
  44              		.cfi_def_cfa_offset 32
  45 0004 00AF     		add	r7, sp, #0
  46              	.LCFI2:
  47              		.cfi_def_cfa_register 7
  48 0006 F860     		str	r0, [r7, #12]
  49 0008 B960     		str	r1, [r7, #8]
  50 000a 7A60     		str	r2, [r7, #4]
  51 000c 3B60     		str	r3, [r7]
 169:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****   uint32_t temp;
 170:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c **** 
 171:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****   /* Check the UART handle allocation */
 172:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****   if (huart == NULL)
  52              		.loc 1 172 6
  53 000e FB68     		ldr	r3, [r7, #12]
  54 0010 002B     		cmp	r3, #0
  55 0012 01D1     		bne	.L2
 173:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****   {
 174:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****     return HAL_ERROR;
  56              		.loc 1 174 12
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\ccxzgcer.s 			page 5


  57 0014 0123     		movs	r3, #1
  58 0016 5DE0     		b	.L3
  59              	.L2:
 175:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****   }
 176:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****   /* Check the Driver Enable UART instance */
 177:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****   assert_param(IS_UART_DRIVER_ENABLE_INSTANCE(huart->Instance));
 178:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c **** 
 179:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****   /* Check the Driver Enable polarity */
 180:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****   assert_param(IS_UART_DE_POLARITY(Polarity));
 181:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c **** 
 182:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****   /* Check the Driver Enable assertion time */
 183:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****   assert_param(IS_UART_ASSERTIONTIME(AssertionTime));
 184:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c **** 
 185:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****   /* Check the Driver Enable deassertion time */
 186:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****   assert_param(IS_UART_DEASSERTIONTIME(DeassertionTime));
 187:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c **** 
 188:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****   if (huart->gState == HAL_UART_STATE_RESET)
  60              		.loc 1 188 12
  61 0018 FB68     		ldr	r3, [r7, #12]
  62 001a 8822     		movs	r2, #136
  63 001c 9B58     		ldr	r3, [r3, r2]
  64              		.loc 1 188 6
  65 001e 002B     		cmp	r3, #0
  66 0020 07D1     		bne	.L4
 189:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****   {
 190:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****     /* Allocate lock resource and initialize it */
 191:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****     huart->Lock = HAL_UNLOCKED;
  67              		.loc 1 191 17
  68 0022 FB68     		ldr	r3, [r7, #12]
  69 0024 8422     		movs	r2, #132
  70 0026 0021     		movs	r1, #0
  71 0028 9954     		strb	r1, [r3, r2]
 192:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c **** 
 193:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c **** #if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
 194:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****     UART_InitCallbacksToDefault(huart);
 195:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c **** 
 196:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****     if (huart->MspInitCallback == NULL)
 197:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****     {
 198:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****       huart->MspInitCallback = HAL_UART_MspInit;
 199:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****     }
 200:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c **** 
 201:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****     /* Init the low level hardware */
 202:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****     huart->MspInitCallback(huart);
 203:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c **** #else
 204:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****     /* Init the low level hardware : GPIO, CLOCK, CORTEX */
 205:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****     HAL_UART_MspInit(huart);
  72              		.loc 1 205 5
  73 002a FB68     		ldr	r3, [r7, #12]
  74 002c 1800     		movs	r0, r3
  75 002e FFF7FEFF 		bl	HAL_UART_MspInit
  76              	.L4:
 206:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c **** #endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
 207:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****   }
 208:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c **** 
 209:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****   huart->gState = HAL_UART_STATE_BUSY;
  77              		.loc 1 209 17
  78 0032 FB68     		ldr	r3, [r7, #12]
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\ccxzgcer.s 			page 6


  79 0034 8822     		movs	r2, #136
  80 0036 2421     		movs	r1, #36
  81 0038 9950     		str	r1, [r3, r2]
 210:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c **** 
 211:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****   /* Disable the Peripheral */
 212:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****   __HAL_UART_DISABLE(huart);
  82              		.loc 1 212 3
  83 003a FB68     		ldr	r3, [r7, #12]
  84 003c 1B68     		ldr	r3, [r3]
  85 003e 1A68     		ldr	r2, [r3]
  86 0040 FB68     		ldr	r3, [r7, #12]
  87 0042 1B68     		ldr	r3, [r3]
  88 0044 0121     		movs	r1, #1
  89 0046 8A43     		bics	r2, r1
  90 0048 1A60     		str	r2, [r3]
 213:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c **** 
 214:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****   /* Perform advanced settings configuration */
 215:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****   /* For some items, configuration requires to be done prior TE and RE bits are set */
 216:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****   if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
  91              		.loc 1 216 26
  92 004a FB68     		ldr	r3, [r7, #12]
  93 004c 9B6A     		ldr	r3, [r3, #40]
  94              		.loc 1 216 6
  95 004e 002B     		cmp	r3, #0
  96 0050 03D0     		beq	.L5
 217:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****   {
 218:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****     UART_AdvFeatureConfig(huart);
  97              		.loc 1 218 5
  98 0052 FB68     		ldr	r3, [r7, #12]
  99 0054 1800     		movs	r0, r3
 100 0056 FFF7FEFF 		bl	UART_AdvFeatureConfig
 101              	.L5:
 219:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****   }
 220:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c **** 
 221:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****   /* Set the UART Communication parameters */
 222:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****   if (UART_SetConfig(huart) == HAL_ERROR)
 102              		.loc 1 222 7
 103 005a FB68     		ldr	r3, [r7, #12]
 104 005c 1800     		movs	r0, r3
 105 005e FFF7FEFF 		bl	UART_SetConfig
 106 0062 0300     		movs	r3, r0
 107              		.loc 1 222 6
 108 0064 012B     		cmp	r3, #1
 109 0066 01D1     		bne	.L6
 223:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****   {
 224:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****     return HAL_ERROR;
 110              		.loc 1 224 12
 111 0068 0123     		movs	r3, #1
 112 006a 33E0     		b	.L3
 113              	.L6:
 225:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****   }
 226:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c **** 
 227:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****   /* Enable the Driver Enable mode by setting the DEM bit in the CR3 register */
 228:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****   SET_BIT(huart->Instance->CR3, USART_CR3_DEM);
 114              		.loc 1 228 3
 115 006c FB68     		ldr	r3, [r7, #12]
 116 006e 1B68     		ldr	r3, [r3]
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\ccxzgcer.s 			page 7


 117 0070 9A68     		ldr	r2, [r3, #8]
 118 0072 FB68     		ldr	r3, [r7, #12]
 119 0074 1B68     		ldr	r3, [r3]
 120 0076 8021     		movs	r1, #128
 121 0078 C901     		lsls	r1, r1, #7
 122 007a 0A43     		orrs	r2, r1
 123 007c 9A60     		str	r2, [r3, #8]
 229:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c **** 
 230:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****   /* Set the Driver Enable polarity */
 231:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****   MODIFY_REG(huart->Instance->CR3, USART_CR3_DEP, Polarity);
 124              		.loc 1 231 3
 125 007e FB68     		ldr	r3, [r7, #12]
 126 0080 1B68     		ldr	r3, [r3]
 127 0082 9B68     		ldr	r3, [r3, #8]
 128 0084 154A     		ldr	r2, .L7
 129 0086 1340     		ands	r3, r2
 130 0088 1900     		movs	r1, r3
 131 008a FB68     		ldr	r3, [r7, #12]
 132 008c 1B68     		ldr	r3, [r3]
 133 008e BA68     		ldr	r2, [r7, #8]
 134 0090 0A43     		orrs	r2, r1
 135 0092 9A60     		str	r2, [r3, #8]
 232:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c **** 
 233:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****   /* Set the Driver Enable assertion and deassertion times */
 234:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****   temp = (AssertionTime << UART_CR1_DEAT_ADDRESS_LSB_POS);
 136              		.loc 1 234 8
 137 0094 7B68     		ldr	r3, [r7, #4]
 138 0096 5B05     		lsls	r3, r3, #21
 139 0098 7B61     		str	r3, [r7, #20]
 235:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****   temp |= (DeassertionTime << UART_CR1_DEDT_ADDRESS_LSB_POS);
 140              		.loc 1 235 28
 141 009a 3B68     		ldr	r3, [r7]
 142 009c 1B04     		lsls	r3, r3, #16
 143              		.loc 1 235 8
 144 009e 7A69     		ldr	r2, [r7, #20]
 145 00a0 1343     		orrs	r3, r2
 146 00a2 7B61     		str	r3, [r7, #20]
 236:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****   MODIFY_REG(huart->Instance->CR1, (USART_CR1_DEDT | USART_CR1_DEAT), temp);
 147              		.loc 1 236 3
 148 00a4 FB68     		ldr	r3, [r7, #12]
 149 00a6 1B68     		ldr	r3, [r3]
 150 00a8 1B68     		ldr	r3, [r3]
 151 00aa 0D4A     		ldr	r2, .L7+4
 152 00ac 1340     		ands	r3, r2
 153 00ae 1900     		movs	r1, r3
 154 00b0 FB68     		ldr	r3, [r7, #12]
 155 00b2 1B68     		ldr	r3, [r3]
 156 00b4 7A69     		ldr	r2, [r7, #20]
 157 00b6 0A43     		orrs	r2, r1
 158 00b8 1A60     		str	r2, [r3]
 237:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c **** 
 238:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****   /* Enable the Peripheral */
 239:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****   __HAL_UART_ENABLE(huart);
 159              		.loc 1 239 3
 160 00ba FB68     		ldr	r3, [r7, #12]
 161 00bc 1B68     		ldr	r3, [r3]
 162 00be 1A68     		ldr	r2, [r3]
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\ccxzgcer.s 			page 8


 163 00c0 FB68     		ldr	r3, [r7, #12]
 164 00c2 1B68     		ldr	r3, [r3]
 165 00c4 0121     		movs	r1, #1
 166 00c6 0A43     		orrs	r2, r1
 167 00c8 1A60     		str	r2, [r3]
 240:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c **** 
 241:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****   /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
 242:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****   return (UART_CheckIdleState(huart));
 168              		.loc 1 242 11
 169 00ca FB68     		ldr	r3, [r7, #12]
 170 00cc 1800     		movs	r0, r3
 171 00ce FFF7FEFF 		bl	UART_CheckIdleState
 172 00d2 0300     		movs	r3, r0
 173              	.L3:
 243:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c **** }
 174              		.loc 1 243 1
 175 00d4 1800     		movs	r0, r3
 176 00d6 BD46     		mov	sp, r7
 177 00d8 06B0     		add	sp, sp, #24
 178              		@ sp needed
 179 00da 80BD     		pop	{r7, pc}
 180              	.L8:
 181              		.align	2
 182              	.L7:
 183 00dc FF7FFFFF 		.word	-32769
 184 00e0 FFFF00FC 		.word	-67043329
 185              		.cfi_endproc
 186              	.LFE363:
 188              		.section	.text.HAL_UARTEx_WakeupCallback,"ax",%progbits
 189              		.align	1
 190              		.weak	HAL_UARTEx_WakeupCallback
 191              		.syntax unified
 192              		.code	16
 193              		.thumb_func
 195              	HAL_UARTEx_WakeupCallback:
 196              	.LFB364:
 244:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c **** 
 245:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c **** /**
 246:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****   * @}
 247:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****   */
 248:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c **** 
 249:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c **** /** @defgroup UARTEx_Exported_Functions_Group2 IO operation functions
 250:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****   *  @brief Extended functions
 251:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****   *
 252:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c **** @verbatim
 253:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****  ===============================================================================
 254:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****                       ##### IO operation functions #####
 255:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****  ===============================================================================
 256:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****     This subsection provides a set of Wakeup and FIFO mode related callback functions.
 257:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c **** 
 258:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****     (#) Wakeup from Stop mode Callback:
 259:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****         (+) HAL_UARTEx_WakeupCallback()
 260:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c **** 
 261:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****     (#) TX/RX Fifos Callbacks:
 262:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****         (+) HAL_UARTEx_RxFifoFullCallback()
 263:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****         (+) HAL_UARTEx_TxFifoEmptyCallback()
 264:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c **** 
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\ccxzgcer.s 			page 9


 265:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c **** @endverbatim
 266:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****   * @{
 267:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****   */
 268:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c **** 
 269:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c **** /**
 270:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****   * @brief UART wakeup from Stop mode callback.
 271:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****   * @param huart UART handle.
 272:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****   * @retval None
 273:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****   */
 274:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c **** __weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
 275:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c **** {
 197              		.loc 1 275 1
 198              		.cfi_startproc
 199              		@ args = 0, pretend = 0, frame = 8
 200              		@ frame_needed = 1, uses_anonymous_args = 0
 201 0000 80B5     		push	{r7, lr}
 202              	.LCFI3:
 203              		.cfi_def_cfa_offset 8
 204              		.cfi_offset 7, -8
 205              		.cfi_offset 14, -4
 206 0002 82B0     		sub	sp, sp, #8
 207              	.LCFI4:
 208              		.cfi_def_cfa_offset 16
 209 0004 00AF     		add	r7, sp, #0
 210              	.LCFI5:
 211              		.cfi_def_cfa_register 7
 212 0006 7860     		str	r0, [r7, #4]
 276:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****   /* Prevent unused argument(s) compilation warning */
 277:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****   UNUSED(huart);
 278:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c **** 
 279:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****   /* NOTE : This function should not be modified, when the callback is needed,
 280:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****             the HAL_UARTEx_WakeupCallback can be implemented in the user file.
 281:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****    */
 282:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c **** }
 213              		.loc 1 282 1
 214 0008 C046     		nop
 215 000a BD46     		mov	sp, r7
 216 000c 02B0     		add	sp, sp, #8
 217              		@ sp needed
 218 000e 80BD     		pop	{r7, pc}
 219              		.cfi_endproc
 220              	.LFE364:
 222              		.section	.text.HAL_UARTEx_RxFifoFullCallback,"ax",%progbits
 223              		.align	1
 224              		.weak	HAL_UARTEx_RxFifoFullCallback
 225              		.syntax unified
 226              		.code	16
 227              		.thumb_func
 229              	HAL_UARTEx_RxFifoFullCallback:
 230              	.LFB365:
 283:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c **** 
 284:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c **** /**
 285:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****   * @brief  UART RX Fifo full callback.
 286:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****   * @param  huart UART handle.
 287:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****   * @retval None
 288:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****   */
 289:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c **** __weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\ccxzgcer.s 			page 10


 290:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c **** {
 231              		.loc 1 290 1
 232              		.cfi_startproc
 233              		@ args = 0, pretend = 0, frame = 8
 234              		@ frame_needed = 1, uses_anonymous_args = 0
 235 0000 80B5     		push	{r7, lr}
 236              	.LCFI6:
 237              		.cfi_def_cfa_offset 8
 238              		.cfi_offset 7, -8
 239              		.cfi_offset 14, -4
 240 0002 82B0     		sub	sp, sp, #8
 241              	.LCFI7:
 242              		.cfi_def_cfa_offset 16
 243 0004 00AF     		add	r7, sp, #0
 244              	.LCFI8:
 245              		.cfi_def_cfa_register 7
 246 0006 7860     		str	r0, [r7, #4]
 291:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****   /* Prevent unused argument(s) compilation warning */
 292:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****   UNUSED(huart);
 293:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c **** 
 294:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****   /* NOTE : This function should not be modified, when the callback is needed,
 295:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****             the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
 296:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****    */
 297:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c **** }
 247              		.loc 1 297 1
 248 0008 C046     		nop
 249 000a BD46     		mov	sp, r7
 250 000c 02B0     		add	sp, sp, #8
 251              		@ sp needed
 252 000e 80BD     		pop	{r7, pc}
 253              		.cfi_endproc
 254              	.LFE365:
 256              		.section	.text.HAL_UARTEx_TxFifoEmptyCallback,"ax",%progbits
 257              		.align	1
 258              		.weak	HAL_UARTEx_TxFifoEmptyCallback
 259              		.syntax unified
 260              		.code	16
 261              		.thumb_func
 263              	HAL_UARTEx_TxFifoEmptyCallback:
 264              	.LFB366:
 298:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c **** 
 299:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c **** /**
 300:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****   * @brief  UART TX Fifo empty callback.
 301:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****   * @param  huart UART handle.
 302:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****   * @retval None
 303:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****   */
 304:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c **** __weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
 305:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c **** {
 265              		.loc 1 305 1
 266              		.cfi_startproc
 267              		@ args = 0, pretend = 0, frame = 8
 268              		@ frame_needed = 1, uses_anonymous_args = 0
 269 0000 80B5     		push	{r7, lr}
 270              	.LCFI9:
 271              		.cfi_def_cfa_offset 8
 272              		.cfi_offset 7, -8
 273              		.cfi_offset 14, -4
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\ccxzgcer.s 			page 11


 274 0002 82B0     		sub	sp, sp, #8
 275              	.LCFI10:
 276              		.cfi_def_cfa_offset 16
 277 0004 00AF     		add	r7, sp, #0
 278              	.LCFI11:
 279              		.cfi_def_cfa_register 7
 280 0006 7860     		str	r0, [r7, #4]
 306:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****   /* Prevent unused argument(s) compilation warning */
 307:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****   UNUSED(huart);
 308:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c **** 
 309:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****   /* NOTE : This function should not be modified, when the callback is needed,
 310:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****             the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
 311:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****    */
 312:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c **** }
 281              		.loc 1 312 1
 282 0008 C046     		nop
 283 000a BD46     		mov	sp, r7
 284 000c 02B0     		add	sp, sp, #8
 285              		@ sp needed
 286 000e 80BD     		pop	{r7, pc}
 287              		.cfi_endproc
 288              	.LFE366:
 290              		.section	.text.HAL_MultiProcessorEx_AddressLength_Set,"ax",%progbits
 291              		.align	1
 292              		.global	HAL_MultiProcessorEx_AddressLength_Set
 293              		.syntax unified
 294              		.code	16
 295              		.thumb_func
 297              	HAL_MultiProcessorEx_AddressLength_Set:
 298              	.LFB367:
 313:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c **** 
 314:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c **** /**
 315:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****   * @}
 316:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****   */
 317:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c **** 
 318:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c **** /** @defgroup UARTEx_Exported_Functions_Group3 Peripheral Control functions
 319:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****   * @brief    Extended Peripheral Control functions
 320:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****   *
 321:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c **** @verbatim
 322:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****  ===============================================================================
 323:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****                       ##### Peripheral Control functions #####
 324:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****  ===============================================================================
 325:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****     [..] This section provides the following functions:
 326:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****      (+) HAL_MultiProcessorEx_AddressLength_Set() API optionally sets the UART node address
 327:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****          detection length to more than 4 bits for multiprocessor address mark wake up.
 328:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****      (+) HAL_UARTEx_StopModeWakeUpSourceConfig() API defines the wake-up from stop mode
 329:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****          trigger: address match, Start Bit detection or RXNE bit status.
 330:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****      (+) HAL_UARTEx_EnableStopMode() API enables the UART to wake up the MCU from stop mode
 331:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****      (+) HAL_UARTEx_DisableStopMode() API disables the above functionality
 332:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****      (+) HAL_UARTEx_EnableFifoMode() API enables the FIFO mode
 333:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****      (+) HAL_UARTEx_DisableFifoMode() API disables the FIFO mode
 334:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****      (+) HAL_UARTEx_SetTxFifoThreshold() API sets the TX FIFO threshold
 335:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****      (+) HAL_UARTEx_SetRxFifoThreshold() API sets the RX FIFO threshold
 336:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c **** 
 337:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****     [..] This subsection also provides a set of additional functions providing enhanced reception
 338:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****     services to user. (For example, these functions allow application to handle use cases
 339:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****     where number of data to be received is unknown).
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\ccxzgcer.s 			page 12


 340:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c **** 
 341:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****     (#) Compared to standard reception services which only consider number of received
 342:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****         data elements as reception completion criteria, these functions also consider additional ev
 343:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****         as triggers for updating reception status to caller :
 344:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****        (+) Detection of inactivity period (RX line has not been active for a given period).
 345:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****           (++) RX inactivity detected by IDLE event, i.e. RX line has been in idle state (normally 
 346:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****                for 1 frame time, after last received byte.
 347:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****           (++) RX inactivity detected by RTO, i.e. line has been in idle state
 348:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****                for a programmable time, after last received byte.
 349:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****        (+) Detection that a specific character has been received.
 350:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c **** 
 351:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****     (#) There are two mode of transfer:
 352:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****        (+) Blocking mode: The reception is performed in polling mode, until either expected number 
 353:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****            or till IDLE event occurs. Reception is handled only during function execution.
 354:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****            When function exits, no data reception could occur. HAL status and number of actually re
 355:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****            are returned by function after finishing transfer.
 356:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****        (+) Non-Blocking mode: The reception is performed using Interrupts or DMA.
 357:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****            These API's return the HAL status.
 358:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****            The end of the data processing will be indicated through the
 359:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****            dedicated UART IRQ when using Interrupt mode or the DMA IRQ when using DMA mode.
 360:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****            The HAL_UARTEx_RxEventCallback() user callback will be executed during Receive process
 361:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****            The HAL_UART_ErrorCallback()user callback will be executed when a reception error is det
 362:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c **** 
 363:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****     (#) Blocking mode API:
 364:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****         (+) HAL_UARTEx_ReceiveToIdle()
 365:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c **** 
 366:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****     (#) Non-Blocking mode API with Interrupt:
 367:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****         (+) HAL_UARTEx_ReceiveToIdle_IT()
 368:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c **** 
 369:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****     (#) Non-Blocking mode API with DMA:
 370:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****         (+) HAL_UARTEx_ReceiveToIdle_DMA()
 371:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c **** 
 372:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c **** @endverbatim
 373:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****   * @{
 374:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****   */
 375:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c **** 
 376:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c **** /**
 377:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****   * @brief By default in multiprocessor mode, when the wake up method is set
 378:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****   *        to address mark, the UART handles only 4-bit long addresses detection;
 379:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****   *        this API allows to enable longer addresses detection (6-, 7- or 8-bit
 380:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****   *        long).
 381:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****   * @note  Addresses detection lengths are: 6-bit address detection in 7-bit data mode,
 382:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****   *        7-bit address detection in 8-bit data mode, 8-bit address detection in 9-bit data mode.
 383:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****   * @param huart         UART handle.
 384:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****   * @param AddressLength This parameter can be one of the following values:
 385:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****   *          @arg @ref UART_ADDRESS_DETECT_4B 4-bit long address
 386:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****   *          @arg @ref UART_ADDRESS_DETECT_7B 6-, 7- or 8-bit long address
 387:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****   * @retval HAL status
 388:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****   */
 389:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c **** HAL_StatusTypeDef HAL_MultiProcessorEx_AddressLength_Set(UART_HandleTypeDef *huart, uint32_t Addres
 390:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c **** {
 299              		.loc 1 390 1
 300              		.cfi_startproc
 301              		@ args = 0, pretend = 0, frame = 8
 302              		@ frame_needed = 1, uses_anonymous_args = 0
 303 0000 80B5     		push	{r7, lr}
 304              	.LCFI12:
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\ccxzgcer.s 			page 13


 305              		.cfi_def_cfa_offset 8
 306              		.cfi_offset 7, -8
 307              		.cfi_offset 14, -4
 308 0002 82B0     		sub	sp, sp, #8
 309              	.LCFI13:
 310              		.cfi_def_cfa_offset 16
 311 0004 00AF     		add	r7, sp, #0
 312              	.LCFI14:
 313              		.cfi_def_cfa_register 7
 314 0006 7860     		str	r0, [r7, #4]
 315 0008 3960     		str	r1, [r7]
 391:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****   /* Check the UART handle allocation */
 392:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****   if (huart == NULL)
 316              		.loc 1 392 6
 317 000a 7B68     		ldr	r3, [r7, #4]
 318 000c 002B     		cmp	r3, #0
 319 000e 01D1     		bne	.L13
 393:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****   {
 394:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****     return HAL_ERROR;
 320              		.loc 1 394 12
 321 0010 0123     		movs	r3, #1
 322 0012 23E0     		b	.L14
 323              	.L13:
 395:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****   }
 396:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c **** 
 397:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****   /* Check the address length parameter */
 398:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****   assert_param(IS_UART_ADDRESSLENGTH_DETECT(AddressLength));
 399:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c **** 
 400:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****   huart->gState = HAL_UART_STATE_BUSY;
 324              		.loc 1 400 17
 325 0014 7B68     		ldr	r3, [r7, #4]
 326 0016 8822     		movs	r2, #136
 327 0018 2421     		movs	r1, #36
 328 001a 9950     		str	r1, [r3, r2]
 401:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c **** 
 402:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****   /* Disable the Peripheral */
 403:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****   __HAL_UART_DISABLE(huart);
 329              		.loc 1 403 3
 330 001c 7B68     		ldr	r3, [r7, #4]
 331 001e 1B68     		ldr	r3, [r3]
 332 0020 1A68     		ldr	r2, [r3]
 333 0022 7B68     		ldr	r3, [r7, #4]
 334 0024 1B68     		ldr	r3, [r3]
 335 0026 0121     		movs	r1, #1
 336 0028 8A43     		bics	r2, r1
 337 002a 1A60     		str	r2, [r3]
 404:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c **** 
 405:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****   /* Set the address length */
 406:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****   MODIFY_REG(huart->Instance->CR2, USART_CR2_ADDM7, AddressLength);
 338              		.loc 1 406 3
 339 002c 7B68     		ldr	r3, [r7, #4]
 340 002e 1B68     		ldr	r3, [r3]
 341 0030 5B68     		ldr	r3, [r3, #4]
 342 0032 1022     		movs	r2, #16
 343 0034 9343     		bics	r3, r2
 344 0036 1900     		movs	r1, r3
 345 0038 7B68     		ldr	r3, [r7, #4]
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\ccxzgcer.s 			page 14


 346 003a 1B68     		ldr	r3, [r3]
 347 003c 3A68     		ldr	r2, [r7]
 348 003e 0A43     		orrs	r2, r1
 349 0040 5A60     		str	r2, [r3, #4]
 407:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c **** 
 408:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****   /* Enable the Peripheral */
 409:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****   __HAL_UART_ENABLE(huart);
 350              		.loc 1 409 3
 351 0042 7B68     		ldr	r3, [r7, #4]
 352 0044 1B68     		ldr	r3, [r3]
 353 0046 1A68     		ldr	r2, [r3]
 354 0048 7B68     		ldr	r3, [r7, #4]
 355 004a 1B68     		ldr	r3, [r3]
 356 004c 0121     		movs	r1, #1
 357 004e 0A43     		orrs	r2, r1
 358 0050 1A60     		str	r2, [r3]
 410:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c **** 
 411:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****   /* TEACK and/or REACK to check before moving huart->gState to Ready */
 412:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****   return (UART_CheckIdleState(huart));
 359              		.loc 1 412 11
 360 0052 7B68     		ldr	r3, [r7, #4]
 361 0054 1800     		movs	r0, r3
 362 0056 FFF7FEFF 		bl	UART_CheckIdleState
 363 005a 0300     		movs	r3, r0
 364              	.L14:
 413:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c **** }
 365              		.loc 1 413 1
 366 005c 1800     		movs	r0, r3
 367 005e BD46     		mov	sp, r7
 368 0060 02B0     		add	sp, sp, #8
 369              		@ sp needed
 370 0062 80BD     		pop	{r7, pc}
 371              		.cfi_endproc
 372              	.LFE367:
 374              		.section	.text.HAL_UARTEx_StopModeWakeUpSourceConfig,"ax",%progbits
 375              		.align	1
 376              		.global	HAL_UARTEx_StopModeWakeUpSourceConfig
 377              		.syntax unified
 378              		.code	16
 379              		.thumb_func
 381              	HAL_UARTEx_StopModeWakeUpSourceConfig:
 382              	.LFB368:
 414:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c **** 
 415:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c **** /**
 416:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****   * @brief Set Wakeup from Stop mode interrupt flag selection.
 417:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****   * @note It is the application responsibility to enable the interrupt used as
 418:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****   *       usart_wkup interrupt source before entering low-power mode.
 419:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****   * @param huart           UART handle.
 420:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****   * @param WakeUpSelection Address match, Start Bit detection or RXNE/RXFNE bit status.
 421:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****   *          This parameter can be one of the following values:
 422:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****   *          @arg @ref UART_WAKEUP_ON_ADDRESS
 423:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****   *          @arg @ref UART_WAKEUP_ON_STARTBIT
 424:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****   *          @arg @ref UART_WAKEUP_ON_READDATA_NONEMPTY
 425:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****   * @retval HAL status
 426:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****   */
 427:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c **** HAL_StatusTypeDef HAL_UARTEx_StopModeWakeUpSourceConfig(UART_HandleTypeDef *huart, UART_WakeUpTypeD
 428:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c **** {
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\ccxzgcer.s 			page 15


 383              		.loc 1 428 1
 384              		.cfi_startproc
 385              		@ args = 0, pretend = 0, frame = 24
 386              		@ frame_needed = 1, uses_anonymous_args = 0
 387 0000 80B5     		push	{r7, lr}
 388              	.LCFI15:
 389              		.cfi_def_cfa_offset 8
 390              		.cfi_offset 7, -8
 391              		.cfi_offset 14, -4
 392 0002 88B0     		sub	sp, sp, #32
 393              	.LCFI16:
 394              		.cfi_def_cfa_offset 40
 395 0004 02AF     		add	r7, sp, #8
 396              	.LCFI17:
 397              		.cfi_def_cfa 7, 32
 398 0006 F860     		str	r0, [r7, #12]
 399 0008 3B1D     		adds	r3, r7, #4
 400 000a 1960     		str	r1, [r3]
 401 000c 5A60     		str	r2, [r3, #4]
 429:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****   HAL_StatusTypeDef status = HAL_OK;
 402              		.loc 1 429 21
 403 000e 1723     		movs	r3, #23
 404 0010 FB18     		adds	r3, r7, r3
 405 0012 0022     		movs	r2, #0
 406 0014 1A70     		strb	r2, [r3]
 430:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****   uint32_t tickstart;
 431:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c **** 
 432:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****   /* check the wake-up from stop mode UART instance */
 433:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****   assert_param(IS_UART_WAKEUP_FROMSTOP_INSTANCE(huart->Instance));
 434:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****   /* check the wake-up selection parameter */
 435:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****   assert_param(IS_UART_WAKEUP_SELECTION(WakeUpSelection.WakeUpEvent));
 436:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c **** 
 437:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****   /* Process Locked */
 438:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****   __HAL_LOCK(huart);
 407              		.loc 1 438 3
 408 0016 FB68     		ldr	r3, [r7, #12]
 409 0018 8422     		movs	r2, #132
 410 001a 9B5C     		ldrb	r3, [r3, r2]
 411 001c 012B     		cmp	r3, #1
 412 001e 01D1     		bne	.L16
 413              		.loc 1 438 3 is_stmt 0 discriminator 1
 414 0020 0223     		movs	r3, #2
 415 0022 4CE0     		b	.L17
 416              	.L16:
 417              		.loc 1 438 3 discriminator 2
 418 0024 FB68     		ldr	r3, [r7, #12]
 419 0026 8422     		movs	r2, #132
 420 0028 0121     		movs	r1, #1
 421 002a 9954     		strb	r1, [r3, r2]
 439:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c **** 
 440:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****   huart->gState = HAL_UART_STATE_BUSY;
 422              		.loc 1 440 17 is_stmt 1 discriminator 2
 423 002c FB68     		ldr	r3, [r7, #12]
 424 002e 8822     		movs	r2, #136
 425 0030 2421     		movs	r1, #36
 426 0032 9950     		str	r1, [r3, r2]
 441:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c **** 
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\ccxzgcer.s 			page 16


 442:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****   /* Disable the Peripheral */
 443:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****   __HAL_UART_DISABLE(huart);
 427              		.loc 1 443 3 discriminator 2
 428 0034 FB68     		ldr	r3, [r7, #12]
 429 0036 1B68     		ldr	r3, [r3]
 430 0038 1A68     		ldr	r2, [r3]
 431 003a FB68     		ldr	r3, [r7, #12]
 432 003c 1B68     		ldr	r3, [r3]
 433 003e 0121     		movs	r1, #1
 434 0040 8A43     		bics	r2, r1
 435 0042 1A60     		str	r2, [r3]
 444:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c **** 
 445:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****   /* Set the wake-up selection scheme */
 446:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****   MODIFY_REG(huart->Instance->CR3, USART_CR3_WUS, WakeUpSelection.WakeUpEvent);
 436              		.loc 1 446 3 discriminator 2
 437 0044 FB68     		ldr	r3, [r7, #12]
 438 0046 1B68     		ldr	r3, [r3]
 439 0048 9B68     		ldr	r3, [r3, #8]
 440 004a 1F4A     		ldr	r2, .L21
 441 004c 1340     		ands	r3, r2
 442 004e 1900     		movs	r1, r3
 443 0050 3B1D     		adds	r3, r7, #4
 444 0052 1A68     		ldr	r2, [r3]
 445 0054 FB68     		ldr	r3, [r7, #12]
 446 0056 1B68     		ldr	r3, [r3]
 447 0058 0A43     		orrs	r2, r1
 448 005a 9A60     		str	r2, [r3, #8]
 447:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c **** 
 448:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****   if (WakeUpSelection.WakeUpEvent == UART_WAKEUP_ON_ADDRESS)
 449              		.loc 1 448 22 discriminator 2
 450 005c 3B1D     		adds	r3, r7, #4
 451 005e 1B68     		ldr	r3, [r3]
 452              		.loc 1 448 6 discriminator 2
 453 0060 002B     		cmp	r3, #0
 454 0062 05D1     		bne	.L18
 449:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****   {
 450:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****     UARTEx_Wakeup_AddressConfig(huart, WakeUpSelection);
 455              		.loc 1 450 5
 456 0064 3B1D     		adds	r3, r7, #4
 457 0066 F868     		ldr	r0, [r7, #12]
 458 0068 1968     		ldr	r1, [r3]
 459 006a 5A68     		ldr	r2, [r3, #4]
 460 006c FFF7FEFF 		bl	UARTEx_Wakeup_AddressConfig
 461              	.L18:
 451:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****   }
 452:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c **** 
 453:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****   /* Enable the Peripheral */
 454:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****   __HAL_UART_ENABLE(huart);
 462              		.loc 1 454 3
 463 0070 FB68     		ldr	r3, [r7, #12]
 464 0072 1B68     		ldr	r3, [r3]
 465 0074 1A68     		ldr	r2, [r3]
 466 0076 FB68     		ldr	r3, [r7, #12]
 467 0078 1B68     		ldr	r3, [r3]
 468 007a 0121     		movs	r1, #1
 469 007c 0A43     		orrs	r2, r1
 470 007e 1A60     		str	r2, [r3]
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\ccxzgcer.s 			page 17


 455:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c **** 
 456:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****   /* Init tickstart for timeout management */
 457:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****   tickstart = HAL_GetTick();
 471              		.loc 1 457 15
 472 0080 FFF7FEFF 		bl	HAL_GetTick
 473 0084 0300     		movs	r3, r0
 474 0086 3B61     		str	r3, [r7, #16]
 458:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c **** 
 459:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****   /* Wait until REACK flag is set */
 460:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****   if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE)
 475              		.loc 1 460 7
 476 0088 3B69     		ldr	r3, [r7, #16]
 477 008a 8022     		movs	r2, #128
 478 008c D103     		lsls	r1, r2, #15
 479 008e F868     		ldr	r0, [r7, #12]
 480 0090 0E4A     		ldr	r2, .L21+4
 481 0092 0092     		str	r2, [sp]
 482 0094 0022     		movs	r2, #0
 483 0096 FFF7FEFF 		bl	UART_WaitOnFlagUntilTimeout
 484 009a 031E     		subs	r3, r0, #0
 485              		.loc 1 460 6
 486 009c 04D0     		beq	.L19
 461:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****   {
 462:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****     status = HAL_TIMEOUT;
 487              		.loc 1 462 12
 488 009e 1723     		movs	r3, #23
 489 00a0 FB18     		adds	r3, r7, r3
 490 00a2 0322     		movs	r2, #3
 491 00a4 1A70     		strb	r2, [r3]
 492 00a6 03E0     		b	.L20
 493              	.L19:
 463:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****   }
 464:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****   else
 465:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****   {
 466:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****     /* Initialize the UART State */
 467:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****     huart->gState = HAL_UART_STATE_READY;
 494              		.loc 1 467 19
 495 00a8 FB68     		ldr	r3, [r7, #12]
 496 00aa 8822     		movs	r2, #136
 497 00ac 2021     		movs	r1, #32
 498 00ae 9950     		str	r1, [r3, r2]
 499              	.L20:
 468:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****   }
 469:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c **** 
 470:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****   /* Process Unlocked */
 471:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****   __HAL_UNLOCK(huart);
 500              		.loc 1 471 3
 501 00b0 FB68     		ldr	r3, [r7, #12]
 502 00b2 8422     		movs	r2, #132
 503 00b4 0021     		movs	r1, #0
 504 00b6 9954     		strb	r1, [r3, r2]
 472:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c **** 
 473:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****   return status;
 505              		.loc 1 473 10
 506 00b8 1723     		movs	r3, #23
 507 00ba FB18     		adds	r3, r7, r3
 508 00bc 1B78     		ldrb	r3, [r3]
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\ccxzgcer.s 			page 18


 509              	.L17:
 474:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c **** }
 510              		.loc 1 474 1
 511 00be 1800     		movs	r0, r3
 512 00c0 BD46     		mov	sp, r7
 513 00c2 06B0     		add	sp, sp, #24
 514              		@ sp needed
 515 00c4 80BD     		pop	{r7, pc}
 516              	.L22:
 517 00c6 C046     		.align	2
 518              	.L21:
 519 00c8 FFFFCFFF 		.word	-3145729
 520 00cc FFFFFF01 		.word	33554431
 521              		.cfi_endproc
 522              	.LFE368:
 524              		.section	.text.HAL_UARTEx_EnableStopMode,"ax",%progbits
 525              		.align	1
 526              		.global	HAL_UARTEx_EnableStopMode
 527              		.syntax unified
 528              		.code	16
 529              		.thumb_func
 531              	HAL_UARTEx_EnableStopMode:
 532              	.LFB369:
 475:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c **** 
 476:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c **** /**
 477:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****   * @brief Enable UART Stop Mode.
 478:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****   * @note The UART is able to wake up the MCU from Stop 1 mode as long as UART clock is HSI or LSE.
 479:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****   * @param huart UART handle.
 480:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****   * @retval HAL status
 481:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****   */
 482:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c **** HAL_StatusTypeDef HAL_UARTEx_EnableStopMode(UART_HandleTypeDef *huart)
 483:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c **** {
 533              		.loc 1 483 1
 534              		.cfi_startproc
 535              		@ args = 0, pretend = 0, frame = 24
 536              		@ frame_needed = 1, uses_anonymous_args = 0
 537 0000 80B5     		push	{r7, lr}
 538              	.LCFI18:
 539              		.cfi_def_cfa_offset 8
 540              		.cfi_offset 7, -8
 541              		.cfi_offset 14, -4
 542 0002 86B0     		sub	sp, sp, #24
 543              	.LCFI19:
 544              		.cfi_def_cfa_offset 32
 545 0004 00AF     		add	r7, sp, #0
 546              	.LCFI20:
 547              		.cfi_def_cfa_register 7
 548 0006 7860     		str	r0, [r7, #4]
 484:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****   /* Process Locked */
 485:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****   __HAL_LOCK(huart);
 549              		.loc 1 485 3
 550 0008 7B68     		ldr	r3, [r7, #4]
 551 000a 8422     		movs	r2, #132
 552 000c 9B5C     		ldrb	r3, [r3, r2]
 553 000e 012B     		cmp	r3, #1
 554 0010 01D1     		bne	.L24
 555              		.loc 1 485 3 is_stmt 0 discriminator 1
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\ccxzgcer.s 			page 19


 556 0012 0223     		movs	r3, #2
 557 0014 21E0     		b	.L25
 558              	.L24:
 559              		.loc 1 485 3 discriminator 2
 560 0016 7B68     		ldr	r3, [r7, #4]
 561 0018 8422     		movs	r2, #132
 562 001a 0121     		movs	r1, #1
 563 001c 9954     		strb	r1, [r3, r2]
 564              	.LBB30:
 565              	.LBB31:
 566              	.LBB32:
 567              		.file 2 "Drivers/CMSIS/Include/cmsis_gcc.h"
   1:Drivers/CMSIS/Include/cmsis_gcc.h **** /**************************************************************************//**
   2:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @file     cmsis_gcc.h
   3:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @brief    CMSIS compiler GCC header file
   4:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @version  V5.2.0
   5:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @date     08. May 2019
   6:Drivers/CMSIS/Include/cmsis_gcc.h ****  ******************************************************************************/
   7:Drivers/CMSIS/Include/cmsis_gcc.h **** /*
   8:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Copyright (c) 2009-2019 Arm Limited. All rights reserved.
   9:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  10:Drivers/CMSIS/Include/cmsis_gcc.h ****  * SPDX-License-Identifier: Apache-2.0
  11:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  12:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Licensed under the Apache License, Version 2.0 (the License); you may
  13:Drivers/CMSIS/Include/cmsis_gcc.h ****  * not use this file except in compliance with the License.
  14:Drivers/CMSIS/Include/cmsis_gcc.h ****  * You may obtain a copy of the License at
  15:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  16:Drivers/CMSIS/Include/cmsis_gcc.h ****  * www.apache.org/licenses/LICENSE-2.0
  17:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  18:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Unless required by applicable law or agreed to in writing, software
  19:Drivers/CMSIS/Include/cmsis_gcc.h ****  * distributed under the License is distributed on an AS IS BASIS, WITHOUT
  20:Drivers/CMSIS/Include/cmsis_gcc.h ****  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  21:Drivers/CMSIS/Include/cmsis_gcc.h ****  * See the License for the specific language governing permissions and
  22:Drivers/CMSIS/Include/cmsis_gcc.h ****  * limitations under the License.
  23:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
  24:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  25:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __CMSIS_GCC_H
  26:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_H
  27:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  28:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ignore some GCC warnings */
  29:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic push
  30:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wsign-conversion"
  31:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wconversion"
  32:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wunused-parameter"
  33:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  34:Drivers/CMSIS/Include/cmsis_gcc.h **** /* Fallback for __has_builtin */
  35:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __has_builtin
  36:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __has_builtin(x) (0)
  37:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  38:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  39:Drivers/CMSIS/Include/cmsis_gcc.h **** /* CMSIS compiler specific defines */
  40:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __ASM
  41:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __ASM                                  __asm
  42:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  43:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __INLINE
  44:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __INLINE                               inline
  45:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\ccxzgcer.s 			page 20


  46:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __STATIC_INLINE
  47:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __STATIC_INLINE                        static inline
  48:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  49:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __STATIC_FORCEINLINE                 
  50:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __STATIC_FORCEINLINE                   __attribute__((always_inline)) static inline
  51:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif                                           
  52:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __NO_RETURN
  53:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __NO_RETURN                            __attribute__((__noreturn__))
  54:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  55:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __USED
  56:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __USED                                 __attribute__((used))
  57:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  58:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __WEAK
  59:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __WEAK                                 __attribute__((weak))
  60:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  61:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED
  62:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED                               __attribute__((packed, aligned(1)))
  63:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  64:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED_STRUCT
  65:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED_STRUCT                        struct __attribute__((packed, aligned(1)))
  66:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  67:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED_UNION
  68:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED_UNION                         union __attribute__((packed, aligned(1)))
  69:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  70:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32        /* deprecated */
  71:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  72:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  73:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  74:Drivers/CMSIS/Include/cmsis_gcc.h ****   struct __attribute__((packed)) T_UINT32 { uint32_t v; };
  75:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  76:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32(x)                  (((struct T_UINT32 *)(x))->v)
  77:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  78:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT16_WRITE
  79:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  80:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  81:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  82:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT16_WRITE { uint16_t v; };
  83:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  84:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT16_WRITE(addr, val)    (void)((((struct T_UINT16_WRITE *)(void *)(addr))-
  85:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  86:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT16_READ
  87:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  88:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  89:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  90:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT16_READ { uint16_t v; };
  91:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  92:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT16_READ(addr)          (((const struct T_UINT16_READ *)(const void *)(add
  93:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  94:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32_WRITE
  95:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  96:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  97:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  98:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT32_WRITE { uint32_t v; };
  99:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
 100:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32_WRITE(addr, val)    (void)((((struct T_UINT32_WRITE *)(void *)(addr))-
 101:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 102:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32_READ
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\ccxzgcer.s 			page 21


 103:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
 104:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
 105:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
 106:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT32_READ { uint32_t v; };
 107:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
 108:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32_READ(addr)          (((const struct T_UINT32_READ *)(const void *)(add
 109:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 110:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __ALIGNED
 111:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __ALIGNED(x)                           __attribute__((aligned(x)))
 112:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 113:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __RESTRICT
 114:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __RESTRICT                             __restrict
 115:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 116:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __COMPILER_BARRIER
 117:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __COMPILER_BARRIER()                   __ASM volatile("":::"memory")
 118:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 119:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 120:Drivers/CMSIS/Include/cmsis_gcc.h **** /* #########################  Startup and Lowlevel Init  ######################## */
 121:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 122:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __PROGRAM_START
 123:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 124:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 125:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Initializes data and bss sections
 126:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details This default implementations initialized all data and additional bss
 127:Drivers/CMSIS/Include/cmsis_gcc.h ****            sections relying on .copy.table and .zero.table specified properly
 128:Drivers/CMSIS/Include/cmsis_gcc.h ****            in the used linker script.
 129:Drivers/CMSIS/Include/cmsis_gcc.h ****   
 130:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 131:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE __NO_RETURN void __cmsis_start(void)
 132:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 133:Drivers/CMSIS/Include/cmsis_gcc.h ****   extern void _start(void) __NO_RETURN;
 134:Drivers/CMSIS/Include/cmsis_gcc.h ****   
 135:Drivers/CMSIS/Include/cmsis_gcc.h ****   typedef struct {
 136:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t const* src;
 137:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t* dest;
 138:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t  wlen;
 139:Drivers/CMSIS/Include/cmsis_gcc.h ****   } __copy_table_t;
 140:Drivers/CMSIS/Include/cmsis_gcc.h ****   
 141:Drivers/CMSIS/Include/cmsis_gcc.h ****   typedef struct {
 142:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t* dest;
 143:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t  wlen;
 144:Drivers/CMSIS/Include/cmsis_gcc.h ****   } __zero_table_t;
 145:Drivers/CMSIS/Include/cmsis_gcc.h ****   
 146:Drivers/CMSIS/Include/cmsis_gcc.h ****   extern const __copy_table_t __copy_table_start__;
 147:Drivers/CMSIS/Include/cmsis_gcc.h ****   extern const __copy_table_t __copy_table_end__;
 148:Drivers/CMSIS/Include/cmsis_gcc.h ****   extern const __zero_table_t __zero_table_start__;
 149:Drivers/CMSIS/Include/cmsis_gcc.h ****   extern const __zero_table_t __zero_table_end__;
 150:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 151:Drivers/CMSIS/Include/cmsis_gcc.h ****   for (__copy_table_t const* pTable = &__copy_table_start__; pTable < &__copy_table_end__; ++pTable
 152:Drivers/CMSIS/Include/cmsis_gcc.h ****     for(uint32_t i=0u; i<pTable->wlen; ++i) {
 153:Drivers/CMSIS/Include/cmsis_gcc.h ****       pTable->dest[i] = pTable->src[i];
 154:Drivers/CMSIS/Include/cmsis_gcc.h ****     }
 155:Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 156:Drivers/CMSIS/Include/cmsis_gcc.h ****  
 157:Drivers/CMSIS/Include/cmsis_gcc.h ****   for (__zero_table_t const* pTable = &__zero_table_start__; pTable < &__zero_table_end__; ++pTable
 158:Drivers/CMSIS/Include/cmsis_gcc.h ****     for(uint32_t i=0u; i<pTable->wlen; ++i) {
 159:Drivers/CMSIS/Include/cmsis_gcc.h ****       pTable->dest[i] = 0u;
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\ccxzgcer.s 			page 22


 160:Drivers/CMSIS/Include/cmsis_gcc.h ****     }
 161:Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 162:Drivers/CMSIS/Include/cmsis_gcc.h ****  
 163:Drivers/CMSIS/Include/cmsis_gcc.h ****   _start();
 164:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 165:Drivers/CMSIS/Include/cmsis_gcc.h ****   
 166:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __PROGRAM_START           __cmsis_start
 167:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 168:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 169:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __INITIAL_SP
 170:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __INITIAL_SP              __StackTop
 171:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 172:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 173:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __STACK_LIMIT
 174:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __STACK_LIMIT             __StackLimit
 175:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 176:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 177:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __VECTOR_TABLE
 178:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __VECTOR_TABLE            __Vectors
 179:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 180:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 181:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __VECTOR_TABLE_ATTRIBUTE
 182:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __VECTOR_TABLE_ATTRIBUTE  __attribute((used, section(".vectors")))
 183:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 184:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 185:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ###########################  Core Function Access  ########################### */
 186:Drivers/CMSIS/Include/cmsis_gcc.h **** /** \ingroup  CMSIS_Core_FunctionInterface
 187:Drivers/CMSIS/Include/cmsis_gcc.h ****     \defgroup CMSIS_Core_RegAccFunctions CMSIS Core Register Access Functions
 188:Drivers/CMSIS/Include/cmsis_gcc.h ****   @{
 189:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 190:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 191:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 192:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Enable IRQ Interrupts
 193:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
 194:Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 195:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 196:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __enable_irq(void)
 197:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 198:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsie i" : : : "memory");
 199:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 200:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 201:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 202:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 203:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Disable IRQ Interrupts
 204:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Disables IRQ interrupts by setting the I-bit in the CPSR.
 205:Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 206:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 207:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __disable_irq(void)
 208:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 209:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsid i" : : : "memory");
 210:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 211:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 212:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 213:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 214:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Control Register
 215:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the content of the Control Register.
 216:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Control Register value
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\ccxzgcer.s 			page 23


 217:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 218:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_CONTROL(void)
 219:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 220:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 221:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 222:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, control" : "=r" (result) );
 223:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 224:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 225:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 226:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 227:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 228:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 229:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Control Register (non-secure)
 230:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the content of the non-secure Control Register when in secure mode.
 231:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               non-secure Control Register value
 232:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 233:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_CONTROL_NS(void)
 234:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 235:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 236:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 237:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, control_ns" : "=r" (result) );
 238:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 239:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 240:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 241:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 242:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 243:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 244:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Control Register
 245:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Writes the given value to the Control Register.
 246:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    control  Control Register value to set
 247:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 248:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_CONTROL(uint32_t control)
 249:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 250:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
 251:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 252:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 253:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 254:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 255:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 256:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Control Register (non-secure)
 257:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Writes the given value to the non-secure Control Register when in secure state.
 258:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    control  Control Register value to set
 259:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 260:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_CONTROL_NS(uint32_t control)
 261:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 262:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR control_ns, %0" : : "r" (control) : "memory");
 263:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 264:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 265:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 266:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 267:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 268:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get IPSR Register
 269:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the content of the IPSR Register.
 270:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               IPSR Register value
 271:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 272:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_IPSR(void)
 273:Drivers/CMSIS/Include/cmsis_gcc.h **** {
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\ccxzgcer.s 			page 24


 274:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 275:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 276:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 277:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 278:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 279:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 280:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 281:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 282:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get APSR Register
 283:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the content of the APSR Register.
 284:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               APSR Register value
 285:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 286:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_APSR(void)
 287:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 288:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 289:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 290:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, apsr" : "=r" (result) );
 291:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 292:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 293:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 294:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 295:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 296:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get xPSR Register
 297:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the content of the xPSR Register.
 298:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               xPSR Register value
 299:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 300:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_xPSR(void)
 301:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 302:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 303:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 304:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, xpsr" : "=r" (result) );
 305:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 306:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 307:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 308:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 309:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 310:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Process Stack Pointer
 311:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Process Stack Pointer (PSP).
 312:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               PSP Register value
 313:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 314:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_PSP(void)
 315:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 316:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 317:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 318:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, psp"  : "=r" (result) );
 319:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 320:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 321:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 322:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 323:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 324:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 325:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Process Stack Pointer (non-secure)
 326:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the non-secure Process Stack Pointer (PSP) when in secure s
 327:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               PSP Register value
 328:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 329:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_PSP_NS(void)
 330:Drivers/CMSIS/Include/cmsis_gcc.h **** {
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\ccxzgcer.s 			page 25


 331:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 332:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 333:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, psp_ns"  : "=r" (result) );
 334:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 335:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 336:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 337:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 338:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 339:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 340:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Process Stack Pointer
 341:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Process Stack Pointer (PSP).
 342:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    topOfProcStack  Process Stack Pointer value to set
 343:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 344:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_PSP(uint32_t topOfProcStack)
 345:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 346:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
 347:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 348:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 349:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 350:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 351:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 352:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Process Stack Pointer (non-secure)
 353:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Process Stack Pointer (PSP) when in secure sta
 354:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    topOfProcStack  Process Stack Pointer value to set
 355:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 356:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_PSP_NS(uint32_t topOfProcStack)
 357:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 358:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR psp_ns, %0" : : "r" (topOfProcStack) : );
 359:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 360:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 361:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 362:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 363:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 364:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Main Stack Pointer
 365:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Main Stack Pointer (MSP).
 366:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               MSP Register value
 367:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 368:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_MSP(void)
 369:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 370:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 371:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 372:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, msp" : "=r" (result) );
 373:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 374:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 375:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 376:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 377:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 378:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 379:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Main Stack Pointer (non-secure)
 380:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the non-secure Main Stack Pointer (MSP) when in secure stat
 381:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               MSP Register value
 382:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 383:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_MSP_NS(void)
 384:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 385:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 386:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 387:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, msp_ns" : "=r" (result) );
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\ccxzgcer.s 			page 26


 388:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 389:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 390:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 391:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 392:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 393:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 394:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Main Stack Pointer
 395:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Main Stack Pointer (MSP).
 396:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    topOfMainStack  Main Stack Pointer value to set
 397:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 398:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_MSP(uint32_t topOfMainStack)
 399:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 400:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 401:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 402:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 403:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 404:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 405:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 406:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Main Stack Pointer (non-secure)
 407:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Main Stack Pointer (MSP) when in secure state.
 408:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    topOfMainStack  Main Stack Pointer value to set
 409:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 410:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_MSP_NS(uint32_t topOfMainStack)
 411:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 412:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR msp_ns, %0" : : "r" (topOfMainStack) : );
 413:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 414:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 415:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 416:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 417:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 418:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 419:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Stack Pointer (non-secure)
 420:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the non-secure Stack Pointer (SP) when in secure state.
 421:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               SP Register value
 422:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 423:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_SP_NS(void)
 424:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 425:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 426:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 427:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, sp_ns" : "=r" (result) );
 428:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 429:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 430:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 431:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 432:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 433:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Stack Pointer (non-secure)
 434:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Stack Pointer (SP) when in secure state.
 435:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    topOfStack  Stack Pointer value to set
 436:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 437:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_SP_NS(uint32_t topOfStack)
 438:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 439:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR sp_ns, %0" : : "r" (topOfStack) : );
 440:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 441:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 442:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 443:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 444:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\ccxzgcer.s 			page 27


 445:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Priority Mask
 446:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current state of the priority mask bit from the Priority Mask Register.
 447:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Priority Mask value
 448:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 449:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
 450:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 451:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 452:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 453:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 568              		.loc 2 453 3 is_stmt 1 discriminator 2
 569              		.syntax divided
 570              	@ 453 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 571 001e EFF31083 		MRS r3, primask
 572              	@ 0 "" 2
 573              		.thumb
 574              		.syntax unified
 575 0022 BB60     		str	r3, [r7, #8]
 454:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 576              		.loc 2 454 9 discriminator 2
 577 0024 BB68     		ldr	r3, [r7, #8]
 578              	.LBE32:
 579              	.LBE31:
 486:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c **** 
 487:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****   /* Set UESM bit */
 488:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****   ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_UESM);
 580              		.loc 1 488 3 discriminator 2
 581 0026 7B61     		str	r3, [r7, #20]
 582 0028 0123     		movs	r3, #1
 583 002a FB60     		str	r3, [r7, #12]
 584              	.LBB33:
 585              	.LBB34:
 455:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 456:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 457:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 458:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 459:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 460:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Priority Mask (non-secure)
 461:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current state of the non-secure priority mask bit from the Priority Mask Reg
 462:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Priority Mask value
 463:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 464:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_PRIMASK_NS(void)
 465:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 466:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 467:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 468:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, primask_ns" : "=r" (result) :: "memory");
 469:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 470:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 471:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 472:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 473:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 474:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 475:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Priority Mask
 476:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Priority Mask Register.
 477:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    priMask  Priority Mask
 478:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 479:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
 480:Drivers/CMSIS/Include/cmsis_gcc.h **** {
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\ccxzgcer.s 			page 28


 481:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 586              		.loc 2 481 3 discriminator 2
 587 002c FB68     		ldr	r3, [r7, #12]
 588              		.syntax divided
 589              	@ 481 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 590 002e 83F31088 		MSR primask, r3
 591              	@ 0 "" 2
 482:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 592              		.loc 2 482 1 discriminator 2
 593              		.thumb
 594              		.syntax unified
 595 0032 C046     		nop
 596              	.LBE34:
 597              	.LBE33:
 598              		.loc 1 488 3 discriminator 2
 599 0034 7B68     		ldr	r3, [r7, #4]
 600 0036 1B68     		ldr	r3, [r3]
 601 0038 1A68     		ldr	r2, [r3]
 602 003a 7B68     		ldr	r3, [r7, #4]
 603 003c 1B68     		ldr	r3, [r3]
 604 003e 0221     		movs	r1, #2
 605 0040 0A43     		orrs	r2, r1
 606 0042 1A60     		str	r2, [r3]
 607 0044 7B69     		ldr	r3, [r7, #20]
 608 0046 3B61     		str	r3, [r7, #16]
 609              	.LBB35:
 610              	.LBB36:
 481:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 611              		.loc 2 481 3 discriminator 2
 612 0048 3B69     		ldr	r3, [r7, #16]
 613              		.syntax divided
 614              	@ 481 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 615 004a 83F31088 		MSR primask, r3
 616              	@ 0 "" 2
 617              		.loc 2 482 1 discriminator 2
 618              		.thumb
 619              		.syntax unified
 620 004e C046     		nop
 621              	.LBE36:
 622              	.LBE35:
 623              	.LBE30:
 489:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c **** 
 490:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****   /* Process Unlocked */
 491:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****   __HAL_UNLOCK(huart);
 624              		.loc 1 491 3 discriminator 2
 625 0050 7B68     		ldr	r3, [r7, #4]
 626 0052 8422     		movs	r2, #132
 627 0054 0021     		movs	r1, #0
 628 0056 9954     		strb	r1, [r3, r2]
 492:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c **** 
 493:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****   return HAL_OK;
 629              		.loc 1 493 10 discriminator 2
 630 0058 0023     		movs	r3, #0
 631              	.L25:
 494:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c **** }
 632              		.loc 1 494 1
 633 005a 1800     		movs	r0, r3
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\ccxzgcer.s 			page 29


 634 005c BD46     		mov	sp, r7
 635 005e 06B0     		add	sp, sp, #24
 636              		@ sp needed
 637 0060 80BD     		pop	{r7, pc}
 638              		.cfi_endproc
 639              	.LFE369:
 641              		.section	.text.HAL_UARTEx_DisableStopMode,"ax",%progbits
 642              		.align	1
 643              		.global	HAL_UARTEx_DisableStopMode
 644              		.syntax unified
 645              		.code	16
 646              		.thumb_func
 648              	HAL_UARTEx_DisableStopMode:
 649              	.LFB370:
 495:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c **** 
 496:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c **** /**
 497:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****   * @brief Disable UART Stop Mode.
 498:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****   * @param huart UART handle.
 499:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****   * @retval HAL status
 500:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****   */
 501:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c **** HAL_StatusTypeDef HAL_UARTEx_DisableStopMode(UART_HandleTypeDef *huart)
 502:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c **** {
 650              		.loc 1 502 1
 651              		.cfi_startproc
 652              		@ args = 0, pretend = 0, frame = 24
 653              		@ frame_needed = 1, uses_anonymous_args = 0
 654 0000 80B5     		push	{r7, lr}
 655              	.LCFI21:
 656              		.cfi_def_cfa_offset 8
 657              		.cfi_offset 7, -8
 658              		.cfi_offset 14, -4
 659 0002 86B0     		sub	sp, sp, #24
 660              	.LCFI22:
 661              		.cfi_def_cfa_offset 32
 662 0004 00AF     		add	r7, sp, #0
 663              	.LCFI23:
 664              		.cfi_def_cfa_register 7
 665 0006 7860     		str	r0, [r7, #4]
 503:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****   /* Process Locked */
 504:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****   __HAL_LOCK(huart);
 666              		.loc 1 504 3
 667 0008 7B68     		ldr	r3, [r7, #4]
 668 000a 8422     		movs	r2, #132
 669 000c 9B5C     		ldrb	r3, [r3, r2]
 670 000e 012B     		cmp	r3, #1
 671 0010 01D1     		bne	.L28
 672              		.loc 1 504 3 is_stmt 0 discriminator 1
 673 0012 0223     		movs	r3, #2
 674 0014 21E0     		b	.L29
 675              	.L28:
 676              		.loc 1 504 3 discriminator 2
 677 0016 7B68     		ldr	r3, [r7, #4]
 678 0018 8422     		movs	r2, #132
 679 001a 0121     		movs	r1, #1
 680 001c 9954     		strb	r1, [r3, r2]
 681              	.LBB37:
 682              	.LBB38:
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\ccxzgcer.s 			page 30


 683              	.LBB39:
 453:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 684              		.loc 2 453 3 is_stmt 1 discriminator 2
 685              		.syntax divided
 686              	@ 453 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 687 001e EFF31083 		MRS r3, primask
 688              	@ 0 "" 2
 689              		.thumb
 690              		.syntax unified
 691 0022 BB60     		str	r3, [r7, #8]
 454:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 692              		.loc 2 454 9 discriminator 2
 693 0024 BB68     		ldr	r3, [r7, #8]
 694              	.LBE39:
 695              	.LBE38:
 505:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c **** 
 506:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****   /* Clear UESM bit */
 507:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****   ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_UESM);
 696              		.loc 1 507 3 discriminator 2
 697 0026 7B61     		str	r3, [r7, #20]
 698 0028 0123     		movs	r3, #1
 699 002a FB60     		str	r3, [r7, #12]
 700              	.LBB40:
 701              	.LBB41:
 481:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 702              		.loc 2 481 3 discriminator 2
 703 002c FB68     		ldr	r3, [r7, #12]
 704              		.syntax divided
 705              	@ 481 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 706 002e 83F31088 		MSR primask, r3
 707              	@ 0 "" 2
 708              		.loc 2 482 1 discriminator 2
 709              		.thumb
 710              		.syntax unified
 711 0032 C046     		nop
 712              	.LBE41:
 713              	.LBE40:
 714              		.loc 1 507 3 discriminator 2
 715 0034 7B68     		ldr	r3, [r7, #4]
 716 0036 1B68     		ldr	r3, [r3]
 717 0038 1A68     		ldr	r2, [r3]
 718 003a 7B68     		ldr	r3, [r7, #4]
 719 003c 1B68     		ldr	r3, [r3]
 720 003e 0221     		movs	r1, #2
 721 0040 8A43     		bics	r2, r1
 722 0042 1A60     		str	r2, [r3]
 723 0044 7B69     		ldr	r3, [r7, #20]
 724 0046 3B61     		str	r3, [r7, #16]
 725              	.LBB42:
 726              	.LBB43:
 481:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 727              		.loc 2 481 3 discriminator 2
 728 0048 3B69     		ldr	r3, [r7, #16]
 729              		.syntax divided
 730              	@ 481 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 731 004a 83F31088 		MSR primask, r3
 732              	@ 0 "" 2
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\ccxzgcer.s 			page 31


 733              		.loc 2 482 1 discriminator 2
 734              		.thumb
 735              		.syntax unified
 736 004e C046     		nop
 737              	.LBE43:
 738              	.LBE42:
 739              	.LBE37:
 508:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c **** 
 509:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****   /* Process Unlocked */
 510:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****   __HAL_UNLOCK(huart);
 740              		.loc 1 510 3 discriminator 2
 741 0050 7B68     		ldr	r3, [r7, #4]
 742 0052 8422     		movs	r2, #132
 743 0054 0021     		movs	r1, #0
 744 0056 9954     		strb	r1, [r3, r2]
 511:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c **** 
 512:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****   return HAL_OK;
 745              		.loc 1 512 10 discriminator 2
 746 0058 0023     		movs	r3, #0
 747              	.L29:
 513:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c **** }
 748              		.loc 1 513 1
 749 005a 1800     		movs	r0, r3
 750 005c BD46     		mov	sp, r7
 751 005e 06B0     		add	sp, sp, #24
 752              		@ sp needed
 753 0060 80BD     		pop	{r7, pc}
 754              		.cfi_endproc
 755              	.LFE370:
 757              		.section	.text.HAL_UARTEx_EnableFifoMode,"ax",%progbits
 758              		.align	1
 759              		.global	HAL_UARTEx_EnableFifoMode
 760              		.syntax unified
 761              		.code	16
 762              		.thumb_func
 764              	HAL_UARTEx_EnableFifoMode:
 765              	.LFB371:
 514:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c **** 
 515:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c **** /**
 516:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****   * @brief  Enable the FIFO mode.
 517:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****   * @param huart      UART handle.
 518:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****   * @retval HAL status
 519:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****   */
 520:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c **** HAL_StatusTypeDef HAL_UARTEx_EnableFifoMode(UART_HandleTypeDef *huart)
 521:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c **** {
 766              		.loc 1 521 1
 767              		.cfi_startproc
 768              		@ args = 0, pretend = 0, frame = 16
 769              		@ frame_needed = 1, uses_anonymous_args = 0
 770 0000 80B5     		push	{r7, lr}
 771              	.LCFI24:
 772              		.cfi_def_cfa_offset 8
 773              		.cfi_offset 7, -8
 774              		.cfi_offset 14, -4
 775 0002 84B0     		sub	sp, sp, #16
 776              	.LCFI25:
 777              		.cfi_def_cfa_offset 24
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\ccxzgcer.s 			page 32


 778 0004 00AF     		add	r7, sp, #0
 779              	.LCFI26:
 780              		.cfi_def_cfa_register 7
 781 0006 7860     		str	r0, [r7, #4]
 522:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****   uint32_t tmpcr1;
 523:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c **** 
 524:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****   /* Check parameters */
 525:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****   assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
 526:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c **** 
 527:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****   /* Process Locked */
 528:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****   __HAL_LOCK(huart);
 782              		.loc 1 528 3
 783 0008 7B68     		ldr	r3, [r7, #4]
 784 000a 8422     		movs	r2, #132
 785 000c 9B5C     		ldrb	r3, [r3, r2]
 786 000e 012B     		cmp	r3, #1
 787 0010 01D1     		bne	.L32
 788              		.loc 1 528 3 is_stmt 0 discriminator 1
 789 0012 0223     		movs	r3, #2
 790 0014 2DE0     		b	.L33
 791              	.L32:
 792              		.loc 1 528 3 discriminator 2
 793 0016 7B68     		ldr	r3, [r7, #4]
 794 0018 8422     		movs	r2, #132
 795 001a 0121     		movs	r1, #1
 796 001c 9954     		strb	r1, [r3, r2]
 529:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c **** 
 530:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****   huart->gState = HAL_UART_STATE_BUSY;
 797              		.loc 1 530 17 is_stmt 1 discriminator 2
 798 001e 7B68     		ldr	r3, [r7, #4]
 799 0020 8822     		movs	r2, #136
 800 0022 2421     		movs	r1, #36
 801 0024 9950     		str	r1, [r3, r2]
 531:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c **** 
 532:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****   /* Save actual UART configuration */
 533:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****   tmpcr1 = READ_REG(huart->Instance->CR1);
 802              		.loc 1 533 12 discriminator 2
 803 0026 7B68     		ldr	r3, [r7, #4]
 804 0028 1B68     		ldr	r3, [r3]
 805              		.loc 1 533 10 discriminator 2
 806 002a 1B68     		ldr	r3, [r3]
 807 002c FB60     		str	r3, [r7, #12]
 534:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c **** 
 535:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****   /* Disable UART */
 536:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****   __HAL_UART_DISABLE(huart);
 808              		.loc 1 536 3 discriminator 2
 809 002e 7B68     		ldr	r3, [r7, #4]
 810 0030 1B68     		ldr	r3, [r3]
 811 0032 1A68     		ldr	r2, [r3]
 812 0034 7B68     		ldr	r3, [r7, #4]
 813 0036 1B68     		ldr	r3, [r3]
 814 0038 0121     		movs	r1, #1
 815 003a 8A43     		bics	r2, r1
 816 003c 1A60     		str	r2, [r3]
 537:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c **** 
 538:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****   /* Enable FIFO mode */
 539:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****   SET_BIT(tmpcr1, USART_CR1_FIFOEN);
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\ccxzgcer.s 			page 33


 817              		.loc 1 539 3 discriminator 2
 818 003e FB68     		ldr	r3, [r7, #12]
 819 0040 8022     		movs	r2, #128
 820 0042 9205     		lsls	r2, r2, #22
 821 0044 1343     		orrs	r3, r2
 822 0046 FB60     		str	r3, [r7, #12]
 540:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****   huart->FifoMode = UART_FIFOMODE_ENABLE;
 823              		.loc 1 540 19 discriminator 2
 824 0048 7B68     		ldr	r3, [r7, #4]
 825 004a 8022     		movs	r2, #128
 826 004c 9205     		lsls	r2, r2, #22
 827 004e 5A66     		str	r2, [r3, #100]
 541:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c **** 
 542:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****   /* Restore UART configuration */
 543:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****   WRITE_REG(huart->Instance->CR1, tmpcr1);
 828              		.loc 1 543 3 discriminator 2
 829 0050 7B68     		ldr	r3, [r7, #4]
 830 0052 1B68     		ldr	r3, [r3]
 831 0054 FA68     		ldr	r2, [r7, #12]
 832 0056 1A60     		str	r2, [r3]
 544:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c **** 
 545:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****   /* Determine the number of data to process during RX/TX ISR execution */
 546:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****   UARTEx_SetNbDataToProcess(huart);
 833              		.loc 1 546 3 discriminator 2
 834 0058 7B68     		ldr	r3, [r7, #4]
 835 005a 1800     		movs	r0, r3
 836 005c FFF7FEFF 		bl	UARTEx_SetNbDataToProcess
 547:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c **** 
 548:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****   huart->gState = HAL_UART_STATE_READY;
 837              		.loc 1 548 17 discriminator 2
 838 0060 7B68     		ldr	r3, [r7, #4]
 839 0062 8822     		movs	r2, #136
 840 0064 2021     		movs	r1, #32
 841 0066 9950     		str	r1, [r3, r2]
 549:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c **** 
 550:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****   /* Process Unlocked */
 551:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****   __HAL_UNLOCK(huart);
 842              		.loc 1 551 3 discriminator 2
 843 0068 7B68     		ldr	r3, [r7, #4]
 844 006a 8422     		movs	r2, #132
 845 006c 0021     		movs	r1, #0
 846 006e 9954     		strb	r1, [r3, r2]
 552:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c **** 
 553:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****   return HAL_OK;
 847              		.loc 1 553 10 discriminator 2
 848 0070 0023     		movs	r3, #0
 849              	.L33:
 554:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c **** }
 850              		.loc 1 554 1
 851 0072 1800     		movs	r0, r3
 852 0074 BD46     		mov	sp, r7
 853 0076 04B0     		add	sp, sp, #16
 854              		@ sp needed
 855 0078 80BD     		pop	{r7, pc}
 856              		.cfi_endproc
 857              	.LFE371:
 859              		.section	.text.HAL_UARTEx_DisableFifoMode,"ax",%progbits
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\ccxzgcer.s 			page 34


 860              		.align	1
 861              		.global	HAL_UARTEx_DisableFifoMode
 862              		.syntax unified
 863              		.code	16
 864              		.thumb_func
 866              	HAL_UARTEx_DisableFifoMode:
 867              	.LFB372:
 555:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c **** 
 556:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c **** /**
 557:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****   * @brief  Disable the FIFO mode.
 558:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****   * @param huart      UART handle.
 559:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****   * @retval HAL status
 560:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****   */
 561:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c **** HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
 562:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c **** {
 868              		.loc 1 562 1
 869              		.cfi_startproc
 870              		@ args = 0, pretend = 0, frame = 16
 871              		@ frame_needed = 1, uses_anonymous_args = 0
 872 0000 80B5     		push	{r7, lr}
 873              	.LCFI27:
 874              		.cfi_def_cfa_offset 8
 875              		.cfi_offset 7, -8
 876              		.cfi_offset 14, -4
 877 0002 84B0     		sub	sp, sp, #16
 878              	.LCFI28:
 879              		.cfi_def_cfa_offset 24
 880 0004 00AF     		add	r7, sp, #0
 881              	.LCFI29:
 882              		.cfi_def_cfa_register 7
 883 0006 7860     		str	r0, [r7, #4]
 563:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****   uint32_t tmpcr1;
 564:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c **** 
 565:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****   /* Check parameters */
 566:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****   assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
 567:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c **** 
 568:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****   /* Process Locked */
 569:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****   __HAL_LOCK(huart);
 884              		.loc 1 569 3
 885 0008 7B68     		ldr	r3, [r7, #4]
 886 000a 8422     		movs	r2, #132
 887 000c 9B5C     		ldrb	r3, [r3, r2]
 888 000e 012B     		cmp	r3, #1
 889 0010 01D1     		bne	.L35
 890              		.loc 1 569 3 is_stmt 0 discriminator 1
 891 0012 0223     		movs	r3, #2
 892 0014 27E0     		b	.L36
 893              	.L35:
 894              		.loc 1 569 3 discriminator 2
 895 0016 7B68     		ldr	r3, [r7, #4]
 896 0018 8422     		movs	r2, #132
 897 001a 0121     		movs	r1, #1
 898 001c 9954     		strb	r1, [r3, r2]
 570:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c **** 
 571:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****   huart->gState = HAL_UART_STATE_BUSY;
 899              		.loc 1 571 17 is_stmt 1 discriminator 2
 900 001e 7B68     		ldr	r3, [r7, #4]
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\ccxzgcer.s 			page 35


 901 0020 8822     		movs	r2, #136
 902 0022 2421     		movs	r1, #36
 903 0024 9950     		str	r1, [r3, r2]
 572:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c **** 
 573:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****   /* Save actual UART configuration */
 574:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****   tmpcr1 = READ_REG(huart->Instance->CR1);
 904              		.loc 1 574 12 discriminator 2
 905 0026 7B68     		ldr	r3, [r7, #4]
 906 0028 1B68     		ldr	r3, [r3]
 907              		.loc 1 574 10 discriminator 2
 908 002a 1B68     		ldr	r3, [r3]
 909 002c FB60     		str	r3, [r7, #12]
 575:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c **** 
 576:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****   /* Disable UART */
 577:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****   __HAL_UART_DISABLE(huart);
 910              		.loc 1 577 3 discriminator 2
 911 002e 7B68     		ldr	r3, [r7, #4]
 912 0030 1B68     		ldr	r3, [r3]
 913 0032 1A68     		ldr	r2, [r3]
 914 0034 7B68     		ldr	r3, [r7, #4]
 915 0036 1B68     		ldr	r3, [r3]
 916 0038 0121     		movs	r1, #1
 917 003a 8A43     		bics	r2, r1
 918 003c 1A60     		str	r2, [r3]
 578:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c **** 
 579:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****   /* Enable FIFO mode */
 580:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****   CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 919              		.loc 1 580 3 discriminator 2
 920 003e FB68     		ldr	r3, [r7, #12]
 921 0040 0B4A     		ldr	r2, .L37
 922 0042 1340     		ands	r3, r2
 923 0044 FB60     		str	r3, [r7, #12]
 581:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****   huart->FifoMode = UART_FIFOMODE_DISABLE;
 924              		.loc 1 581 19 discriminator 2
 925 0046 7B68     		ldr	r3, [r7, #4]
 926 0048 0022     		movs	r2, #0
 927 004a 5A66     		str	r2, [r3, #100]
 582:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c **** 
 583:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****   /* Restore UART configuration */
 584:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****   WRITE_REG(huart->Instance->CR1, tmpcr1);
 928              		.loc 1 584 3 discriminator 2
 929 004c 7B68     		ldr	r3, [r7, #4]
 930 004e 1B68     		ldr	r3, [r3]
 931 0050 FA68     		ldr	r2, [r7, #12]
 932 0052 1A60     		str	r2, [r3]
 585:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c **** 
 586:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****   huart->gState = HAL_UART_STATE_READY;
 933              		.loc 1 586 17 discriminator 2
 934 0054 7B68     		ldr	r3, [r7, #4]
 935 0056 8822     		movs	r2, #136
 936 0058 2021     		movs	r1, #32
 937 005a 9950     		str	r1, [r3, r2]
 587:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c **** 
 588:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****   /* Process Unlocked */
 589:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****   __HAL_UNLOCK(huart);
 938              		.loc 1 589 3 discriminator 2
 939 005c 7B68     		ldr	r3, [r7, #4]
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\ccxzgcer.s 			page 36


 940 005e 8422     		movs	r2, #132
 941 0060 0021     		movs	r1, #0
 942 0062 9954     		strb	r1, [r3, r2]
 590:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c **** 
 591:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****   return HAL_OK;
 943              		.loc 1 591 10 discriminator 2
 944 0064 0023     		movs	r3, #0
 945              	.L36:
 592:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c **** }
 946              		.loc 1 592 1
 947 0066 1800     		movs	r0, r3
 948 0068 BD46     		mov	sp, r7
 949 006a 04B0     		add	sp, sp, #16
 950              		@ sp needed
 951 006c 80BD     		pop	{r7, pc}
 952              	.L38:
 953 006e C046     		.align	2
 954              	.L37:
 955 0070 FFFFFFDF 		.word	-536870913
 956              		.cfi_endproc
 957              	.LFE372:
 959              		.section	.text.HAL_UARTEx_SetTxFifoThreshold,"ax",%progbits
 960              		.align	1
 961              		.global	HAL_UARTEx_SetTxFifoThreshold
 962              		.syntax unified
 963              		.code	16
 964              		.thumb_func
 966              	HAL_UARTEx_SetTxFifoThreshold:
 967              	.LFB373:
 593:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c **** 
 594:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c **** /**
 595:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****   * @brief  Set the TXFIFO threshold.
 596:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****   * @param huart      UART handle.
 597:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****   * @param Threshold  TX FIFO threshold value
 598:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****   *          This parameter can be one of the following values:
 599:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****   *            @arg @ref UART_TXFIFO_THRESHOLD_1_8
 600:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****   *            @arg @ref UART_TXFIFO_THRESHOLD_1_4
 601:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****   *            @arg @ref UART_TXFIFO_THRESHOLD_1_2
 602:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****   *            @arg @ref UART_TXFIFO_THRESHOLD_3_4
 603:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****   *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
 604:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****   *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
 605:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****   * @retval HAL status
 606:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****   */
 607:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c **** HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
 608:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c **** {
 968              		.loc 1 608 1
 969              		.cfi_startproc
 970              		@ args = 0, pretend = 0, frame = 16
 971              		@ frame_needed = 1, uses_anonymous_args = 0
 972 0000 80B5     		push	{r7, lr}
 973              	.LCFI30:
 974              		.cfi_def_cfa_offset 8
 975              		.cfi_offset 7, -8
 976              		.cfi_offset 14, -4
 977 0002 84B0     		sub	sp, sp, #16
 978              	.LCFI31:
 979              		.cfi_def_cfa_offset 24
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\ccxzgcer.s 			page 37


 980 0004 00AF     		add	r7, sp, #0
 981              	.LCFI32:
 982              		.cfi_def_cfa_register 7
 983 0006 7860     		str	r0, [r7, #4]
 984 0008 3960     		str	r1, [r7]
 609:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****   uint32_t tmpcr1;
 610:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c **** 
 611:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****   /* Check parameters */
 612:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****   assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
 613:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****   assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));
 614:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c **** 
 615:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****   /* Process Locked */
 616:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****   __HAL_LOCK(huart);
 985              		.loc 1 616 3
 986 000a 7B68     		ldr	r3, [r7, #4]
 987 000c 8422     		movs	r2, #132
 988 000e 9B5C     		ldrb	r3, [r3, r2]
 989 0010 012B     		cmp	r3, #1
 990 0012 01D1     		bne	.L40
 991              		.loc 1 616 3 is_stmt 0 discriminator 1
 992 0014 0223     		movs	r3, #2
 993 0016 2EE0     		b	.L41
 994              	.L40:
 995              		.loc 1 616 3 discriminator 2
 996 0018 7B68     		ldr	r3, [r7, #4]
 997 001a 8422     		movs	r2, #132
 998 001c 0121     		movs	r1, #1
 999 001e 9954     		strb	r1, [r3, r2]
 617:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c **** 
 618:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****   huart->gState = HAL_UART_STATE_BUSY;
 1000              		.loc 1 618 17 is_stmt 1 discriminator 2
 1001 0020 7B68     		ldr	r3, [r7, #4]
 1002 0022 8822     		movs	r2, #136
 1003 0024 2421     		movs	r1, #36
 1004 0026 9950     		str	r1, [r3, r2]
 619:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c **** 
 620:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****   /* Save actual UART configuration */
 621:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****   tmpcr1 = READ_REG(huart->Instance->CR1);
 1005              		.loc 1 621 12 discriminator 2
 1006 0028 7B68     		ldr	r3, [r7, #4]
 1007 002a 1B68     		ldr	r3, [r3]
 1008              		.loc 1 621 10 discriminator 2
 1009 002c 1B68     		ldr	r3, [r3]
 1010 002e FB60     		str	r3, [r7, #12]
 622:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c **** 
 623:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****   /* Disable UART */
 624:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****   __HAL_UART_DISABLE(huart);
 1011              		.loc 1 624 3 discriminator 2
 1012 0030 7B68     		ldr	r3, [r7, #4]
 1013 0032 1B68     		ldr	r3, [r3]
 1014 0034 1A68     		ldr	r2, [r3]
 1015 0036 7B68     		ldr	r3, [r7, #4]
 1016 0038 1B68     		ldr	r3, [r3]
 1017 003a 0121     		movs	r1, #1
 1018 003c 8A43     		bics	r2, r1
 1019 003e 1A60     		str	r2, [r3]
 625:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c **** 
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\ccxzgcer.s 			page 38


 626:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****   /* Update TX threshold configuration */
 627:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****   MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 1020              		.loc 1 627 3 discriminator 2
 1021 0040 7B68     		ldr	r3, [r7, #4]
 1022 0042 1B68     		ldr	r3, [r3]
 1023 0044 9B68     		ldr	r3, [r3, #8]
 1024 0046 DB00     		lsls	r3, r3, #3
 1025 0048 D908     		lsrs	r1, r3, #3
 1026 004a 7B68     		ldr	r3, [r7, #4]
 1027 004c 1B68     		ldr	r3, [r3]
 1028 004e 3A68     		ldr	r2, [r7]
 1029 0050 0A43     		orrs	r2, r1
 1030 0052 9A60     		str	r2, [r3, #8]
 628:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c **** 
 629:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****   /* Determine the number of data to process during RX/TX ISR execution */
 630:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****   UARTEx_SetNbDataToProcess(huart);
 1031              		.loc 1 630 3 discriminator 2
 1032 0054 7B68     		ldr	r3, [r7, #4]
 1033 0056 1800     		movs	r0, r3
 1034 0058 FFF7FEFF 		bl	UARTEx_SetNbDataToProcess
 631:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c **** 
 632:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****   /* Restore UART configuration */
 633:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****   WRITE_REG(huart->Instance->CR1, tmpcr1);
 1035              		.loc 1 633 3 discriminator 2
 1036 005c 7B68     		ldr	r3, [r7, #4]
 1037 005e 1B68     		ldr	r3, [r3]
 1038 0060 FA68     		ldr	r2, [r7, #12]
 1039 0062 1A60     		str	r2, [r3]
 634:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c **** 
 635:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****   huart->gState = HAL_UART_STATE_READY;
 1040              		.loc 1 635 17 discriminator 2
 1041 0064 7B68     		ldr	r3, [r7, #4]
 1042 0066 8822     		movs	r2, #136
 1043 0068 2021     		movs	r1, #32
 1044 006a 9950     		str	r1, [r3, r2]
 636:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c **** 
 637:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****   /* Process Unlocked */
 638:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****   __HAL_UNLOCK(huart);
 1045              		.loc 1 638 3 discriminator 2
 1046 006c 7B68     		ldr	r3, [r7, #4]
 1047 006e 8422     		movs	r2, #132
 1048 0070 0021     		movs	r1, #0
 1049 0072 9954     		strb	r1, [r3, r2]
 639:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c **** 
 640:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****   return HAL_OK;
 1050              		.loc 1 640 10 discriminator 2
 1051 0074 0023     		movs	r3, #0
 1052              	.L41:
 641:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c **** }
 1053              		.loc 1 641 1
 1054 0076 1800     		movs	r0, r3
 1055 0078 BD46     		mov	sp, r7
 1056 007a 04B0     		add	sp, sp, #16
 1057              		@ sp needed
 1058 007c 80BD     		pop	{r7, pc}
 1059              		.cfi_endproc
 1060              	.LFE373:
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\ccxzgcer.s 			page 39


 1062              		.section	.text.HAL_UARTEx_SetRxFifoThreshold,"ax",%progbits
 1063              		.align	1
 1064              		.global	HAL_UARTEx_SetRxFifoThreshold
 1065              		.syntax unified
 1066              		.code	16
 1067              		.thumb_func
 1069              	HAL_UARTEx_SetRxFifoThreshold:
 1070              	.LFB374:
 642:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c **** 
 643:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c **** /**
 644:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****   * @brief  Set the RXFIFO threshold.
 645:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****   * @param huart      UART handle.
 646:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****   * @param Threshold  RX FIFO threshold value
 647:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****   *          This parameter can be one of the following values:
 648:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****   *            @arg @ref UART_RXFIFO_THRESHOLD_1_8
 649:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****   *            @arg @ref UART_RXFIFO_THRESHOLD_1_4
 650:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****   *            @arg @ref UART_RXFIFO_THRESHOLD_1_2
 651:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****   *            @arg @ref UART_RXFIFO_THRESHOLD_3_4
 652:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****   *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
 653:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****   *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
 654:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****   * @retval HAL status
 655:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****   */
 656:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c **** HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
 657:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c **** {
 1071              		.loc 1 657 1
 1072              		.cfi_startproc
 1073              		@ args = 0, pretend = 0, frame = 16
 1074              		@ frame_needed = 1, uses_anonymous_args = 0
 1075 0000 80B5     		push	{r7, lr}
 1076              	.LCFI33:
 1077              		.cfi_def_cfa_offset 8
 1078              		.cfi_offset 7, -8
 1079              		.cfi_offset 14, -4
 1080 0002 84B0     		sub	sp, sp, #16
 1081              	.LCFI34:
 1082              		.cfi_def_cfa_offset 24
 1083 0004 00AF     		add	r7, sp, #0
 1084              	.LCFI35:
 1085              		.cfi_def_cfa_register 7
 1086 0006 7860     		str	r0, [r7, #4]
 1087 0008 3960     		str	r1, [r7]
 658:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****   uint32_t tmpcr1;
 659:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c **** 
 660:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****   /* Check the parameters */
 661:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****   assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
 662:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****   assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));
 663:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c **** 
 664:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****   /* Process Locked */
 665:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****   __HAL_LOCK(huart);
 1088              		.loc 1 665 3
 1089 000a 7B68     		ldr	r3, [r7, #4]
 1090 000c 8422     		movs	r2, #132
 1091 000e 9B5C     		ldrb	r3, [r3, r2]
 1092 0010 012B     		cmp	r3, #1
 1093 0012 01D1     		bne	.L43
 1094              		.loc 1 665 3 is_stmt 0 discriminator 1
 1095 0014 0223     		movs	r3, #2
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\ccxzgcer.s 			page 40


 1096 0016 2FE0     		b	.L44
 1097              	.L43:
 1098              		.loc 1 665 3 discriminator 2
 1099 0018 7B68     		ldr	r3, [r7, #4]
 1100 001a 8422     		movs	r2, #132
 1101 001c 0121     		movs	r1, #1
 1102 001e 9954     		strb	r1, [r3, r2]
 666:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c **** 
 667:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****   huart->gState = HAL_UART_STATE_BUSY;
 1103              		.loc 1 667 17 is_stmt 1 discriminator 2
 1104 0020 7B68     		ldr	r3, [r7, #4]
 1105 0022 8822     		movs	r2, #136
 1106 0024 2421     		movs	r1, #36
 1107 0026 9950     		str	r1, [r3, r2]
 668:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c **** 
 669:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****   /* Save actual UART configuration */
 670:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****   tmpcr1 = READ_REG(huart->Instance->CR1);
 1108              		.loc 1 670 12 discriminator 2
 1109 0028 7B68     		ldr	r3, [r7, #4]
 1110 002a 1B68     		ldr	r3, [r3]
 1111              		.loc 1 670 10 discriminator 2
 1112 002c 1B68     		ldr	r3, [r3]
 1113 002e FB60     		str	r3, [r7, #12]
 671:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c **** 
 672:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****   /* Disable UART */
 673:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****   __HAL_UART_DISABLE(huart);
 1114              		.loc 1 673 3 discriminator 2
 1115 0030 7B68     		ldr	r3, [r7, #4]
 1116 0032 1B68     		ldr	r3, [r3]
 1117 0034 1A68     		ldr	r2, [r3]
 1118 0036 7B68     		ldr	r3, [r7, #4]
 1119 0038 1B68     		ldr	r3, [r3]
 1120 003a 0121     		movs	r1, #1
 1121 003c 8A43     		bics	r2, r1
 1122 003e 1A60     		str	r2, [r3]
 674:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c **** 
 675:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****   /* Update RX threshold configuration */
 676:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****   MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 1123              		.loc 1 676 3 discriminator 2
 1124 0040 7B68     		ldr	r3, [r7, #4]
 1125 0042 1B68     		ldr	r3, [r3]
 1126 0044 9B68     		ldr	r3, [r3, #8]
 1127 0046 0E4A     		ldr	r2, .L45
 1128 0048 1340     		ands	r3, r2
 1129 004a 1900     		movs	r1, r3
 1130 004c 7B68     		ldr	r3, [r7, #4]
 1131 004e 1B68     		ldr	r3, [r3]
 1132 0050 3A68     		ldr	r2, [r7]
 1133 0052 0A43     		orrs	r2, r1
 1134 0054 9A60     		str	r2, [r3, #8]
 677:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c **** 
 678:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****   /* Determine the number of data to process during RX/TX ISR execution */
 679:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****   UARTEx_SetNbDataToProcess(huart);
 1135              		.loc 1 679 3 discriminator 2
 1136 0056 7B68     		ldr	r3, [r7, #4]
 1137 0058 1800     		movs	r0, r3
 1138 005a FFF7FEFF 		bl	UARTEx_SetNbDataToProcess
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\ccxzgcer.s 			page 41


 680:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c **** 
 681:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****   /* Restore UART configuration */
 682:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****   WRITE_REG(huart->Instance->CR1, tmpcr1);
 1139              		.loc 1 682 3 discriminator 2
 1140 005e 7B68     		ldr	r3, [r7, #4]
 1141 0060 1B68     		ldr	r3, [r3]
 1142 0062 FA68     		ldr	r2, [r7, #12]
 1143 0064 1A60     		str	r2, [r3]
 683:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c **** 
 684:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****   huart->gState = HAL_UART_STATE_READY;
 1144              		.loc 1 684 17 discriminator 2
 1145 0066 7B68     		ldr	r3, [r7, #4]
 1146 0068 8822     		movs	r2, #136
 1147 006a 2021     		movs	r1, #32
 1148 006c 9950     		str	r1, [r3, r2]
 685:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c **** 
 686:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****   /* Process Unlocked */
 687:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****   __HAL_UNLOCK(huart);
 1149              		.loc 1 687 3 discriminator 2
 1150 006e 7B68     		ldr	r3, [r7, #4]
 1151 0070 8422     		movs	r2, #132
 1152 0072 0021     		movs	r1, #0
 1153 0074 9954     		strb	r1, [r3, r2]
 688:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c **** 
 689:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****   return HAL_OK;
 1154              		.loc 1 689 10 discriminator 2
 1155 0076 0023     		movs	r3, #0
 1156              	.L44:
 690:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c **** }
 1157              		.loc 1 690 1
 1158 0078 1800     		movs	r0, r3
 1159 007a BD46     		mov	sp, r7
 1160 007c 04B0     		add	sp, sp, #16
 1161              		@ sp needed
 1162 007e 80BD     		pop	{r7, pc}
 1163              	.L46:
 1164              		.align	2
 1165              	.L45:
 1166 0080 FFFFFFF1 		.word	-234881025
 1167              		.cfi_endproc
 1168              	.LFE374:
 1170              		.section	.text.HAL_UARTEx_ReceiveToIdle,"ax",%progbits
 1171              		.align	1
 1172              		.global	HAL_UARTEx_ReceiveToIdle
 1173              		.syntax unified
 1174              		.code	16
 1175              		.thumb_func
 1177              	HAL_UARTEx_ReceiveToIdle:
 1178              	.LFB375:
 691:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c **** 
 692:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c **** /**
 693:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****   * @brief Receive an amount of data in blocking mode till either the expected number of data
 694:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****   *        is received or an IDLE event occurs.
 695:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****   * @note  HAL_OK is returned if reception is completed (expected number of data has been received)
 696:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****   *        or if reception is stopped after IDLE event (less than the expected number of data has b
 697:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****   *        In this case, RxLen output parameter indicates number of data available in reception buf
 698:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****   * @note  When UART parity is not enabled (PCE = 0), and Word Length is configured to 9 bits (M1-M
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\ccxzgcer.s 			page 42


 699:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****   *        the received data is handled as a set of uint16_t. In this case, Size must indicate the 
 700:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****   *        of uint16_t available through pData.
 701:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****   * @note When FIFO mode is enabled, the RXFNE flag is set as long as the RXFIFO
 702:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****   *       is not empty. Read operations from the RDR register are performed when
 703:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****   *       RXFNE flag is set. From hardware perspective, RXFNE flag and
 704:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****   *       RXNE are mapped on the same bit-field.
 705:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****   * @note   When UART parity is not enabled (PCE = 0), and Word Length is configured to 9 bits (M1-
 706:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****   *         address of user data buffer for storing data to be received, should be aligned on a hal
 707:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****   *         (16 bits) (as received data will be handled using uint16_t pointer cast). Depending on 
 708:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****   *         use of specific alignment compilation directives or pragmas might be required to ensure
 709:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****   *         alignment for pData.
 710:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****   * @param huart   UART handle.
 711:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****   * @param pData   Pointer to data buffer (uint8_t or uint16_t data elements).
 712:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****   * @param Size    Amount of data elements (uint8_t or uint16_t) to be received.
 713:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****   * @param RxLen   Number of data elements finally received
 714:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****   *                (could be lower than Size, in case reception ends on IDLE event)
 715:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****   * @param Timeout Timeout duration expressed in ms (covers the whole reception sequence).
 716:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****   * @retval HAL status
 717:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****   */
 718:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c **** HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size
 719:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****                                            uint32_t Timeout)
 720:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c **** {
 1179              		.loc 1 720 1
 1180              		.cfi_startproc
 1181              		@ args = 4, pretend = 0, frame = 32
 1182              		@ frame_needed = 1, uses_anonymous_args = 0
 1183 0000 80B5     		push	{r7, lr}
 1184              	.LCFI36:
 1185              		.cfi_def_cfa_offset 8
 1186              		.cfi_offset 7, -8
 1187              		.cfi_offset 14, -4
 1188 0002 88B0     		sub	sp, sp, #32
 1189              	.LCFI37:
 1190              		.cfi_def_cfa_offset 40
 1191 0004 00AF     		add	r7, sp, #0
 1192              	.LCFI38:
 1193              		.cfi_def_cfa_register 7
 1194 0006 F860     		str	r0, [r7, #12]
 1195 0008 B960     		str	r1, [r7, #8]
 1196 000a 3B60     		str	r3, [r7]
 1197 000c BB1D     		adds	r3, r7, #6
 1198 000e 1A80     		strh	r2, [r3]
 721:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****   uint8_t  *pdata8bits;
 722:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****   uint16_t *pdata16bits;
 723:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****   uint16_t uhMask;
 724:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****   uint32_t tickstart;
 725:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c **** 
 726:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****   /* Check that a Rx process is not already ongoing */
 727:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****   if (huart->RxState == HAL_UART_STATE_READY)
 1199              		.loc 1 727 12
 1200 0010 FB68     		ldr	r3, [r7, #12]
 1201 0012 8C22     		movs	r2, #140
 1202 0014 9B58     		ldr	r3, [r3, r2]
 1203              		.loc 1 727 6
 1204 0016 202B     		cmp	r3, #32
 1205 0018 00D0     		beq	.LCB976
 1206 001a 09E1     		b	.L48	@long jump
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\ccxzgcer.s 			page 43


 1207              	.LCB976:
 728:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****   {
 729:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****     if ((pData == NULL) || (Size == 0U))
 1208              		.loc 1 729 8
 1209 001c BB68     		ldr	r3, [r7, #8]
 1210 001e 002B     		cmp	r3, #0
 1211 0020 03D0     		beq	.L49
 1212              		.loc 1 729 25 discriminator 1
 1213 0022 BB1D     		adds	r3, r7, #6
 1214 0024 1B88     		ldrh	r3, [r3]
 1215 0026 002B     		cmp	r3, #0
 1216 0028 01D1     		bne	.L50
 1217              	.L49:
 730:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****     {
 731:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****       return  HAL_ERROR;
 1218              		.loc 1 731 15
 1219 002a 0123     		movs	r3, #1
 1220 002c 01E1     		b	.L51
 1221              	.L50:
 732:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****     }
 733:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c **** 
 734:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****     /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
 735:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****        should be aligned on a uint16_t frontier, as data to be received from RDR will be
 736:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****        handled through a uint16_t cast. */
 737:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****     if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 1222              		.loc 1 737 21
 1223 002e FB68     		ldr	r3, [r7, #12]
 1224 0030 9A68     		ldr	r2, [r3, #8]
 1225              		.loc 1 737 8
 1226 0032 8023     		movs	r3, #128
 1227 0034 5B01     		lsls	r3, r3, #5
 1228 0036 9A42     		cmp	r2, r3
 1229 0038 09D1     		bne	.L52
 1230              		.loc 1 737 71 discriminator 1
 1231 003a FB68     		ldr	r3, [r7, #12]
 1232 003c 1B69     		ldr	r3, [r3, #16]
 1233              		.loc 1 737 56 discriminator 1
 1234 003e 002B     		cmp	r3, #0
 1235 0040 05D1     		bne	.L52
 738:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****     {
 739:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****       if ((((uint32_t)pData) & 1U) != 0U)
 1236              		.loc 1 739 13
 1237 0042 BB68     		ldr	r3, [r7, #8]
 1238              		.loc 1 739 30
 1239 0044 0122     		movs	r2, #1
 1240 0046 1340     		ands	r3, r2
 1241              		.loc 1 739 10
 1242 0048 01D0     		beq	.L52
 740:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****       {
 741:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****         return  HAL_ERROR;
 1243              		.loc 1 741 17
 1244 004a 0123     		movs	r3, #1
 1245 004c F1E0     		b	.L51
 1246              	.L52:
 742:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****       }
 743:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****     }
 744:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c **** 
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\ccxzgcer.s 			page 44


 745:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****     huart->ErrorCode = HAL_UART_ERROR_NONE;
 1247              		.loc 1 745 22
 1248 004e FB68     		ldr	r3, [r7, #12]
 1249 0050 9022     		movs	r2, #144
 1250 0052 0021     		movs	r1, #0
 1251 0054 9950     		str	r1, [r3, r2]
 746:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****     huart->RxState = HAL_UART_STATE_BUSY_RX;
 1252              		.loc 1 746 20
 1253 0056 FB68     		ldr	r3, [r7, #12]
 1254 0058 8C22     		movs	r2, #140
 1255 005a 2221     		movs	r1, #34
 1256 005c 9950     		str	r1, [r3, r2]
 747:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****     huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 1257              		.loc 1 747 26
 1258 005e FB68     		ldr	r3, [r7, #12]
 1259 0060 0122     		movs	r2, #1
 1260 0062 DA66     		str	r2, [r3, #108]
 748:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****     huart->RxEventType = HAL_UART_RXEVENT_TC;
 1261              		.loc 1 748 24
 1262 0064 FB68     		ldr	r3, [r7, #12]
 1263 0066 0022     		movs	r2, #0
 1264 0068 1A67     		str	r2, [r3, #112]
 749:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c **** 
 750:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****     /* Init tickstart for timeout management */
 751:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****     tickstart = HAL_GetTick();
 1265              		.loc 1 751 17
 1266 006a FFF7FEFF 		bl	HAL_GetTick
 1267 006e 0300     		movs	r3, r0
 1268 0070 7B61     		str	r3, [r7, #20]
 752:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c **** 
 753:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****     huart->RxXferSize  = Size;
 1269              		.loc 1 753 24
 1270 0072 FB68     		ldr	r3, [r7, #12]
 1271 0074 BA1D     		adds	r2, r7, #6
 1272 0076 5C21     		movs	r1, #92
 1273 0078 1288     		ldrh	r2, [r2]
 1274 007a 5A52     		strh	r2, [r3, r1]
 754:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****     huart->RxXferCount = Size;
 1275              		.loc 1 754 24
 1276 007c FB68     		ldr	r3, [r7, #12]
 1277 007e BA1D     		adds	r2, r7, #6
 1278 0080 5E21     		movs	r1, #94
 1279 0082 1288     		ldrh	r2, [r2]
 1280 0084 5A52     		strh	r2, [r3, r1]
 755:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c **** 
 756:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****     /* Computation of UART mask to apply to RDR register */
 757:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****     UART_MASK_COMPUTATION(huart);
 1281              		.loc 1 757 5
 1282 0086 FB68     		ldr	r3, [r7, #12]
 1283 0088 9A68     		ldr	r2, [r3, #8]
 1284 008a 8023     		movs	r3, #128
 1285 008c 5B01     		lsls	r3, r3, #5
 1286 008e 9A42     		cmp	r2, r3
 1287 0090 0DD1     		bne	.L53
 1288              		.loc 1 757 5 is_stmt 0 discriminator 1
 1289 0092 FB68     		ldr	r3, [r7, #12]
 1290 0094 1B69     		ldr	r3, [r3, #16]
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\ccxzgcer.s 			page 45


 1291 0096 002B     		cmp	r3, #0
 1292 0098 04D1     		bne	.L54
 1293              		.loc 1 757 5 discriminator 3
 1294 009a FB68     		ldr	r3, [r7, #12]
 1295 009c 6022     		movs	r2, #96
 1296 009e 6749     		ldr	r1, .L69
 1297 00a0 9952     		strh	r1, [r3, r2]
 1298 00a2 2EE0     		b	.L55
 1299              	.L54:
 1300              		.loc 1 757 5 discriminator 4
 1301 00a4 FB68     		ldr	r3, [r7, #12]
 1302 00a6 6022     		movs	r2, #96
 1303 00a8 FF21     		movs	r1, #255
 1304 00aa 9952     		strh	r1, [r3, r2]
 1305 00ac 29E0     		b	.L55
 1306              	.L53:
 1307              		.loc 1 757 5 discriminator 2
 1308 00ae FB68     		ldr	r3, [r7, #12]
 1309 00b0 9B68     		ldr	r3, [r3, #8]
 1310 00b2 002B     		cmp	r3, #0
 1311 00b4 0DD1     		bne	.L56
 1312              		.loc 1 757 5 discriminator 5
 1313 00b6 FB68     		ldr	r3, [r7, #12]
 1314 00b8 1B69     		ldr	r3, [r3, #16]
 1315 00ba 002B     		cmp	r3, #0
 1316 00bc 04D1     		bne	.L57
 1317              		.loc 1 757 5 discriminator 7
 1318 00be FB68     		ldr	r3, [r7, #12]
 1319 00c0 6022     		movs	r2, #96
 1320 00c2 FF21     		movs	r1, #255
 1321 00c4 9952     		strh	r1, [r3, r2]
 1322 00c6 1CE0     		b	.L55
 1323              	.L57:
 1324              		.loc 1 757 5 discriminator 8
 1325 00c8 FB68     		ldr	r3, [r7, #12]
 1326 00ca 6022     		movs	r2, #96
 1327 00cc 7F21     		movs	r1, #127
 1328 00ce 9952     		strh	r1, [r3, r2]
 1329 00d0 17E0     		b	.L55
 1330              	.L56:
 1331              		.loc 1 757 5 discriminator 6
 1332 00d2 FB68     		ldr	r3, [r7, #12]
 1333 00d4 9A68     		ldr	r2, [r3, #8]
 1334 00d6 8023     		movs	r3, #128
 1335 00d8 5B05     		lsls	r3, r3, #21
 1336 00da 9A42     		cmp	r2, r3
 1337 00dc 0DD1     		bne	.L58
 1338              		.loc 1 757 5 discriminator 9
 1339 00de FB68     		ldr	r3, [r7, #12]
 1340 00e0 1B69     		ldr	r3, [r3, #16]
 1341 00e2 002B     		cmp	r3, #0
 1342 00e4 04D1     		bne	.L59
 1343              		.loc 1 757 5 discriminator 11
 1344 00e6 FB68     		ldr	r3, [r7, #12]
 1345 00e8 6022     		movs	r2, #96
 1346 00ea 7F21     		movs	r1, #127
 1347 00ec 9952     		strh	r1, [r3, r2]
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\ccxzgcer.s 			page 46


 1348 00ee 08E0     		b	.L55
 1349              	.L59:
 1350              		.loc 1 757 5 discriminator 12
 1351 00f0 FB68     		ldr	r3, [r7, #12]
 1352 00f2 6022     		movs	r2, #96
 1353 00f4 3F21     		movs	r1, #63
 1354 00f6 9952     		strh	r1, [r3, r2]
 1355 00f8 03E0     		b	.L55
 1356              	.L58:
 1357              		.loc 1 757 5 discriminator 10
 1358 00fa FB68     		ldr	r3, [r7, #12]
 1359 00fc 6022     		movs	r2, #96
 1360 00fe 0021     		movs	r1, #0
 1361 0100 9952     		strh	r1, [r3, r2]
 1362              	.L55:
 758:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****     uhMask = huart->Mask;
 1363              		.loc 1 758 12 is_stmt 1
 1364 0102 1223     		movs	r3, #18
 1365 0104 FB18     		adds	r3, r7, r3
 1366 0106 FA68     		ldr	r2, [r7, #12]
 1367 0108 6021     		movs	r1, #96
 1368 010a 525A     		ldrh	r2, [r2, r1]
 1369 010c 1A80     		strh	r2, [r3]
 759:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c **** 
 760:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****     /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
 761:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****     if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 1370              		.loc 1 761 21
 1371 010e FB68     		ldr	r3, [r7, #12]
 1372 0110 9A68     		ldr	r2, [r3, #8]
 1373              		.loc 1 761 8
 1374 0112 8023     		movs	r3, #128
 1375 0114 5B01     		lsls	r3, r3, #5
 1376 0116 9A42     		cmp	r2, r3
 1377 0118 08D1     		bne	.L60
 1378              		.loc 1 761 71 discriminator 1
 1379 011a FB68     		ldr	r3, [r7, #12]
 1380 011c 1B69     		ldr	r3, [r3, #16]
 1381              		.loc 1 761 56 discriminator 1
 1382 011e 002B     		cmp	r3, #0
 1383 0120 04D1     		bne	.L60
 762:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****     {
 763:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****       pdata8bits  = NULL;
 1384              		.loc 1 763 19
 1385 0122 0023     		movs	r3, #0
 1386 0124 FB61     		str	r3, [r7, #28]
 764:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****       pdata16bits = (uint16_t *) pData;
 1387              		.loc 1 764 19
 1388 0126 BB68     		ldr	r3, [r7, #8]
 1389 0128 BB61     		str	r3, [r7, #24]
 1390 012a 03E0     		b	.L61
 1391              	.L60:
 765:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****     }
 766:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****     else
 767:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****     {
 768:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****       pdata8bits  = pData;
 1392              		.loc 1 768 19
 1393 012c BB68     		ldr	r3, [r7, #8]
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\ccxzgcer.s 			page 47


 1394 012e FB61     		str	r3, [r7, #28]
 769:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****       pdata16bits = NULL;
 1395              		.loc 1 769 19
 1396 0130 0023     		movs	r3, #0
 1397 0132 BB61     		str	r3, [r7, #24]
 1398              	.L61:
 770:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****     }
 771:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c **** 
 772:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****     /* Initialize output number of received elements */
 773:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****     *RxLen = 0U;
 1399              		.loc 1 773 12
 1400 0134 3B68     		ldr	r3, [r7]
 1401 0136 0022     		movs	r2, #0
 1402 0138 1A80     		strh	r2, [r3]
 774:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c **** 
 775:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****     /* as long as data have to be received */
 776:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****     while (huart->RxXferCount > 0U)
 1403              		.loc 1 776 11
 1404 013a 62E0     		b	.L62
 1405              	.L68:
 777:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****     {
 778:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****       /* Check if IDLE flag is set */
 779:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****       if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 1406              		.loc 1 779 11
 1407 013c FB68     		ldr	r3, [r7, #12]
 1408 013e 1B68     		ldr	r3, [r3]
 1409 0140 DB69     		ldr	r3, [r3, #28]
 1410 0142 1022     		movs	r2, #16
 1411 0144 1340     		ands	r3, r2
 1412              		.loc 1 779 10
 1413 0146 102B     		cmp	r3, #16
 1414 0148 10D1     		bne	.L63
 780:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****       {
 781:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****         /* Clear IDLE flag in ISR */
 782:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****         __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 1415              		.loc 1 782 9
 1416 014a FB68     		ldr	r3, [r7, #12]
 1417 014c 1B68     		ldr	r3, [r3]
 1418 014e 1022     		movs	r2, #16
 1419 0150 1A62     		str	r2, [r3, #32]
 783:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c **** 
 784:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****         /* If Set, but no data ever received, clear flag without exiting loop */
 785:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****         /* If Set, and data has already been received, this means Idle Event is valid : End recepti
 786:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****         if (*RxLen > 0U)
 1420              		.loc 1 786 13
 1421 0152 3B68     		ldr	r3, [r7]
 1422 0154 1B88     		ldrh	r3, [r3]
 1423              		.loc 1 786 12
 1424 0156 002B     		cmp	r3, #0
 1425 0158 08D0     		beq	.L63
 787:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****         {
 788:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****           huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 1426              		.loc 1 788 30
 1427 015a FB68     		ldr	r3, [r7, #12]
 1428 015c 0222     		movs	r2, #2
 1429 015e 1A67     		str	r2, [r3, #112]
 789:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****           huart->RxState = HAL_UART_STATE_READY;
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\ccxzgcer.s 			page 48


 1430              		.loc 1 789 26
 1431 0160 FB68     		ldr	r3, [r7, #12]
 1432 0162 8C22     		movs	r2, #140
 1433 0164 2021     		movs	r1, #32
 1434 0166 9950     		str	r1, [r3, r2]
 790:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c **** 
 791:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****           return HAL_OK;
 1435              		.loc 1 791 18
 1436 0168 0023     		movs	r3, #0
 1437 016a 62E0     		b	.L51
 1438              	.L63:
 792:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****         }
 793:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****       }
 794:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c **** 
 795:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****       /* Check if RXNE flag is set */
 796:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****       if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RXNE))
 1439              		.loc 1 796 11
 1440 016c FB68     		ldr	r3, [r7, #12]
 1441 016e 1B68     		ldr	r3, [r3]
 1442 0170 DB69     		ldr	r3, [r3, #28]
 1443 0172 2022     		movs	r2, #32
 1444 0174 1340     		ands	r3, r2
 1445              		.loc 1 796 10
 1446 0176 202B     		cmp	r3, #32
 1447 0178 2FD1     		bne	.L64
 797:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****       {
 798:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****         if (pdata8bits == NULL)
 1448              		.loc 1 798 12
 1449 017a FB69     		ldr	r3, [r7, #28]
 1450 017c 002B     		cmp	r3, #0
 1451 017e 0ED1     		bne	.L65
 799:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****         {
 800:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****           *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 1452              		.loc 1 800 42
 1453 0180 FB68     		ldr	r3, [r7, #12]
 1454 0182 1B68     		ldr	r3, [r3]
 1455              		.loc 1 800 52
 1456 0184 5B6A     		ldr	r3, [r3, #36]
 1457              		.loc 1 800 26
 1458 0186 9BB2     		uxth	r3, r3
 1459 0188 1222     		movs	r2, #18
 1460 018a BA18     		adds	r2, r7, r2
 1461 018c 1288     		ldrh	r2, [r2]
 1462 018e 1340     		ands	r3, r2
 1463 0190 9AB2     		uxth	r2, r3
 1464              		.loc 1 800 24
 1465 0192 BB69     		ldr	r3, [r7, #24]
 1466 0194 1A80     		strh	r2, [r3]
 801:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****           pdata16bits++;
 1467              		.loc 1 801 22
 1468 0196 BB69     		ldr	r3, [r7, #24]
 1469 0198 0233     		adds	r3, r3, #2
 1470 019a BB61     		str	r3, [r7, #24]
 1471 019c 0EE0     		b	.L66
 1472              	.L65:
 802:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****         }
 803:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****         else
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\ccxzgcer.s 			page 49


 804:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****         {
 805:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****           *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 1473              		.loc 1 805 40
 1474 019e FB68     		ldr	r3, [r7, #12]
 1475 01a0 1B68     		ldr	r3, [r3]
 1476              		.loc 1 805 50
 1477 01a2 5B6A     		ldr	r3, [r3, #36]
 1478              		.loc 1 805 25
 1479 01a4 DBB2     		uxtb	r3, r3
 1480              		.loc 1 805 58
 1481 01a6 1222     		movs	r2, #18
 1482 01a8 BA18     		adds	r2, r7, r2
 1483 01aa 1288     		ldrh	r2, [r2]
 1484 01ac D2B2     		uxtb	r2, r2
 1485              		.loc 1 805 25
 1486 01ae 1340     		ands	r3, r2
 1487 01b0 DAB2     		uxtb	r2, r3
 1488              		.loc 1 805 23
 1489 01b2 FB69     		ldr	r3, [r7, #28]
 1490 01b4 1A70     		strb	r2, [r3]
 806:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****           pdata8bits++;
 1491              		.loc 1 806 21
 1492 01b6 FB69     		ldr	r3, [r7, #28]
 1493 01b8 0133     		adds	r3, r3, #1
 1494 01ba FB61     		str	r3, [r7, #28]
 1495              	.L66:
 807:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****         }
 808:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****         /* Increment number of received elements */
 809:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****         *RxLen += 1U;
 1496              		.loc 1 809 16
 1497 01bc 3B68     		ldr	r3, [r7]
 1498 01be 1B88     		ldrh	r3, [r3]
 1499 01c0 0133     		adds	r3, r3, #1
 1500 01c2 9AB2     		uxth	r2, r3
 1501 01c4 3B68     		ldr	r3, [r7]
 1502 01c6 1A80     		strh	r2, [r3]
 810:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****         huart->RxXferCount--;
 1503              		.loc 1 810 14
 1504 01c8 FB68     		ldr	r3, [r7, #12]
 1505 01ca 5E22     		movs	r2, #94
 1506 01cc 9B5A     		ldrh	r3, [r3, r2]
 1507 01ce 9BB2     		uxth	r3, r3
 1508              		.loc 1 810 27
 1509 01d0 013B     		subs	r3, r3, #1
 1510 01d2 99B2     		uxth	r1, r3
 1511 01d4 FB68     		ldr	r3, [r7, #12]
 1512 01d6 5E22     		movs	r2, #94
 1513 01d8 9952     		strh	r1, [r3, r2]
 1514              	.L64:
 811:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****       }
 812:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c **** 
 813:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****       /* Check for the Timeout */
 814:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****       if (Timeout != HAL_MAX_DELAY)
 1515              		.loc 1 814 10
 1516 01da BB6A     		ldr	r3, [r7, #40]
 1517 01dc 0133     		adds	r3, r3, #1
 1518 01de 10D0     		beq	.L62
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\ccxzgcer.s 			page 50


 815:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****       {
 816:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****         if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 1519              		.loc 1 816 15
 1520 01e0 FFF7FEFF 		bl	HAL_GetTick
 1521 01e4 0200     		movs	r2, r0
 1522              		.loc 1 816 29
 1523 01e6 7B69     		ldr	r3, [r7, #20]
 1524 01e8 D31A     		subs	r3, r2, r3
 1525              		.loc 1 816 12
 1526 01ea BA6A     		ldr	r2, [r7, #40]
 1527 01ec 9A42     		cmp	r2, r3
 1528 01ee 02D3     		bcc	.L67
 1529              		.loc 1 816 53 discriminator 1
 1530 01f0 BB6A     		ldr	r3, [r7, #40]
 1531 01f2 002B     		cmp	r3, #0
 1532 01f4 05D1     		bne	.L62
 1533              	.L67:
 817:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****         {
 818:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****           huart->RxState = HAL_UART_STATE_READY;
 1534              		.loc 1 818 26
 1535 01f6 FB68     		ldr	r3, [r7, #12]
 1536 01f8 8C22     		movs	r2, #140
 1537 01fa 2021     		movs	r1, #32
 1538 01fc 9950     		str	r1, [r3, r2]
 819:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c **** 
 820:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****           return HAL_TIMEOUT;
 1539              		.loc 1 820 18
 1540 01fe 0323     		movs	r3, #3
 1541 0200 17E0     		b	.L51
 1542              	.L62:
 776:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****     {
 1543              		.loc 1 776 17
 1544 0202 FB68     		ldr	r3, [r7, #12]
 1545 0204 5E22     		movs	r2, #94
 1546 0206 9B5A     		ldrh	r3, [r3, r2]
 1547 0208 9BB2     		uxth	r3, r3
 776:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****     {
 1548              		.loc 1 776 11
 1549 020a 002B     		cmp	r3, #0
 1550 020c 96D1     		bne	.L68
 821:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****         }
 822:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****       }
 823:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****     }
 824:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c **** 
 825:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****     /* Set number of received elements in output parameter : RxLen */
 826:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****     *RxLen = huart->RxXferSize - huart->RxXferCount;
 1551              		.loc 1 826 19
 1552 020e FB68     		ldr	r3, [r7, #12]
 1553 0210 5C22     		movs	r2, #92
 1554 0212 9A5A     		ldrh	r2, [r3, r2]
 1555              		.loc 1 826 39
 1556 0214 FB68     		ldr	r3, [r7, #12]
 1557 0216 5E21     		movs	r1, #94
 1558 0218 5B5A     		ldrh	r3, [r3, r1]
 1559 021a 9BB2     		uxth	r3, r3
 1560              		.loc 1 826 32
 1561 021c D31A     		subs	r3, r2, r3
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\ccxzgcer.s 			page 51


 1562 021e 9AB2     		uxth	r2, r3
 1563              		.loc 1 826 12
 1564 0220 3B68     		ldr	r3, [r7]
 1565 0222 1A80     		strh	r2, [r3]
 827:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****     /* At end of Rx process, restore huart->RxState to Ready */
 828:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****     huart->RxState = HAL_UART_STATE_READY;
 1566              		.loc 1 828 20
 1567 0224 FB68     		ldr	r3, [r7, #12]
 1568 0226 8C22     		movs	r2, #140
 1569 0228 2021     		movs	r1, #32
 1570 022a 9950     		str	r1, [r3, r2]
 829:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c **** 
 830:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****     return HAL_OK;
 1571              		.loc 1 830 12
 1572 022c 0023     		movs	r3, #0
 1573 022e 00E0     		b	.L51
 1574              	.L48:
 831:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****   }
 832:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****   else
 833:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****   {
 834:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****     return HAL_BUSY;
 1575              		.loc 1 834 12
 1576 0230 0223     		movs	r3, #2
 1577              	.L51:
 835:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****   }
 836:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c **** }
 1578              		.loc 1 836 1
 1579 0232 1800     		movs	r0, r3
 1580 0234 BD46     		mov	sp, r7
 1581 0236 08B0     		add	sp, sp, #32
 1582              		@ sp needed
 1583 0238 80BD     		pop	{r7, pc}
 1584              	.L70:
 1585 023a C046     		.align	2
 1586              	.L69:
 1587 023c FF010000 		.word	511
 1588              		.cfi_endproc
 1589              	.LFE375:
 1591              		.section	.text.HAL_UARTEx_ReceiveToIdle_IT,"ax",%progbits
 1592              		.align	1
 1593              		.global	HAL_UARTEx_ReceiveToIdle_IT
 1594              		.syntax unified
 1595              		.code	16
 1596              		.thumb_func
 1598              	HAL_UARTEx_ReceiveToIdle_IT:
 1599              	.LFB376:
 837:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c **** 
 838:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c **** /**
 839:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****   * @brief Receive an amount of data in interrupt mode till either the expected number of data
 840:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****   *        is received or an IDLE event occurs.
 841:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****   * @note  Reception is initiated by this function call. Further progress of reception is achieved 
 842:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****   *        to UART interrupts raised by RXNE and IDLE events. Callback is called at end of receptio
 843:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****   *        number of received data elements.
 844:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****   * @note  When UART parity is not enabled (PCE = 0), and Word Length is configured to 9 bits (M1-M
 845:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****   *        the received data is handled as a set of uint16_t. In this case, Size must indicate the 
 846:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****   *        of uint16_t available through pData.
 847:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****   * @note  When UART parity is not enabled (PCE = 0), and Word Length is configured to 9 bits (M1-M
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\ccxzgcer.s 			page 52


 848:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****   *        address of user data buffer for storing data to be received, should be aligned on a half
 849:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****   *        (16 bits) (as received data will be handled using uint16_t pointer cast). Depending on c
 850:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****   *        use of specific alignment compilation directives or pragmas might be required
 851:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****   *        to ensure proper alignment for pData.
 852:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****   * @param huart UART handle.
 853:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****   * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
 854:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****   * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
 855:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****   * @retval HAL status
 856:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****   */
 857:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c **** HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t S
 858:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c **** {
 1600              		.loc 1 858 1
 1601              		.cfi_startproc
 1602              		@ args = 0, pretend = 0, frame = 40
 1603              		@ frame_needed = 1, uses_anonymous_args = 0
 1604 0000 80B5     		push	{r7, lr}
 1605              	.LCFI39:
 1606              		.cfi_def_cfa_offset 8
 1607              		.cfi_offset 7, -8
 1608              		.cfi_offset 14, -4
 1609 0002 8AB0     		sub	sp, sp, #40
 1610              	.LCFI40:
 1611              		.cfi_def_cfa_offset 48
 1612 0004 00AF     		add	r7, sp, #0
 1613              	.LCFI41:
 1614              		.cfi_def_cfa_register 7
 1615 0006 F860     		str	r0, [r7, #12]
 1616 0008 B960     		str	r1, [r7, #8]
 1617 000a BB1D     		adds	r3, r7, #6
 1618 000c 1A80     		strh	r2, [r3]
 859:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****   HAL_StatusTypeDef status = HAL_OK;
 1619              		.loc 1 859 21
 1620 000e 2723     		movs	r3, #39
 1621 0010 FB18     		adds	r3, r7, r3
 1622 0012 0022     		movs	r2, #0
 1623 0014 1A70     		strb	r2, [r3]
 860:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c **** 
 861:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****   /* Check that a Rx process is not already ongoing */
 862:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****   if (huart->RxState == HAL_UART_STATE_READY)
 1624              		.loc 1 862 12
 1625 0016 FB68     		ldr	r3, [r7, #12]
 1626 0018 8C22     		movs	r2, #140
 1627 001a 9B58     		ldr	r3, [r3, r2]
 1628              		.loc 1 862 6
 1629 001c 202B     		cmp	r3, #32
 1630 001e 4ED1     		bne	.L72
 863:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****   {
 864:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****     if ((pData == NULL) || (Size == 0U))
 1631              		.loc 1 864 8
 1632 0020 BB68     		ldr	r3, [r7, #8]
 1633 0022 002B     		cmp	r3, #0
 1634 0024 03D0     		beq	.L73
 1635              		.loc 1 864 25 discriminator 1
 1636 0026 BB1D     		adds	r3, r7, #6
 1637 0028 1B88     		ldrh	r3, [r3]
 1638 002a 002B     		cmp	r3, #0
 1639 002c 01D1     		bne	.L74
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\ccxzgcer.s 			page 53


 1640              	.L73:
 865:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****     {
 866:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****       return HAL_ERROR;
 1641              		.loc 1 866 14
 1642 002e 0123     		movs	r3, #1
 1643 0030 46E0     		b	.L75
 1644              	.L74:
 867:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****     }
 868:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c **** 
 869:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****     /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
 870:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****        should be aligned on a uint16_t frontier, as data to be received from RDR will be
 871:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****        handled through a uint16_t cast. */
 872:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****     if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 1645              		.loc 1 872 21
 1646 0032 FB68     		ldr	r3, [r7, #12]
 1647 0034 9A68     		ldr	r2, [r3, #8]
 1648              		.loc 1 872 8
 1649 0036 8023     		movs	r3, #128
 1650 0038 5B01     		lsls	r3, r3, #5
 1651 003a 9A42     		cmp	r2, r3
 1652 003c 09D1     		bne	.L76
 1653              		.loc 1 872 71 discriminator 1
 1654 003e FB68     		ldr	r3, [r7, #12]
 1655 0040 1B69     		ldr	r3, [r3, #16]
 1656              		.loc 1 872 56 discriminator 1
 1657 0042 002B     		cmp	r3, #0
 1658 0044 05D1     		bne	.L76
 873:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****     {
 874:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****       if ((((uint32_t)pData) & 1U) != 0U)
 1659              		.loc 1 874 13
 1660 0046 BB68     		ldr	r3, [r7, #8]
 1661              		.loc 1 874 30
 1662 0048 0122     		movs	r2, #1
 1663 004a 1340     		ands	r3, r2
 1664              		.loc 1 874 10
 1665 004c 01D0     		beq	.L76
 875:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****       {
 876:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****         return  HAL_ERROR;
 1666              		.loc 1 876 17
 1667 004e 0123     		movs	r3, #1
 1668 0050 36E0     		b	.L75
 1669              	.L76:
 877:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****       }
 878:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****     }
 879:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c **** 
 880:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****     /* Set Reception type to reception till IDLE Event*/
 881:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****     huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 1670              		.loc 1 881 26
 1671 0052 FB68     		ldr	r3, [r7, #12]
 1672 0054 0122     		movs	r2, #1
 1673 0056 DA66     		str	r2, [r3, #108]
 882:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****     huart->RxEventType = HAL_UART_RXEVENT_TC;
 1674              		.loc 1 882 24
 1675 0058 FB68     		ldr	r3, [r7, #12]
 1676 005a 0022     		movs	r2, #0
 1677 005c 1A67     		str	r2, [r3, #112]
 883:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c **** 
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\ccxzgcer.s 			page 54


 884:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****     (void)UART_Start_Receive_IT(huart, pData, Size);
 1678              		.loc 1 884 11
 1679 005e BB1D     		adds	r3, r7, #6
 1680 0060 1A88     		ldrh	r2, [r3]
 1681 0062 B968     		ldr	r1, [r7, #8]
 1682 0064 FB68     		ldr	r3, [r7, #12]
 1683 0066 1800     		movs	r0, r3
 1684 0068 FFF7FEFF 		bl	UART_Start_Receive_IT
 885:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c **** 
 886:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****     if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 1685              		.loc 1 886 14
 1686 006c FB68     		ldr	r3, [r7, #12]
 1687 006e DB6E     		ldr	r3, [r3, #108]
 1688              		.loc 1 886 8
 1689 0070 012B     		cmp	r3, #1
 1690 0072 1CD1     		bne	.L77
 887:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****     {
 888:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****       __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 1691              		.loc 1 888 7
 1692 0074 FB68     		ldr	r3, [r7, #12]
 1693 0076 1B68     		ldr	r3, [r3]
 1694 0078 1022     		movs	r2, #16
 1695 007a 1A62     		str	r2, [r3, #32]
 1696              	.LBB44:
 1697              	.LBB45:
 1698              	.LBB46:
 453:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 1699              		.loc 2 453 3
 1700              		.syntax divided
 1701              	@ 453 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 1702 007c EFF31083 		MRS r3, primask
 1703              	@ 0 "" 2
 1704              		.thumb
 1705              		.syntax unified
 1706 0080 7B61     		str	r3, [r7, #20]
 454:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 1707              		.loc 2 454 9
 1708 0082 7B69     		ldr	r3, [r7, #20]
 1709              	.LBE46:
 1710              	.LBE45:
 889:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****       ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 1711              		.loc 1 889 7
 1712 0084 3B62     		str	r3, [r7, #32]
 1713 0086 0123     		movs	r3, #1
 1714 0088 BB61     		str	r3, [r7, #24]
 1715              	.LBB47:
 1716              	.LBB48:
 481:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 1717              		.loc 2 481 3
 1718 008a BB69     		ldr	r3, [r7, #24]
 1719              		.syntax divided
 1720              	@ 481 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 1721 008c 83F31088 		MSR primask, r3
 1722              	@ 0 "" 2
 1723              		.loc 2 482 1
 1724              		.thumb
 1725              		.syntax unified
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\ccxzgcer.s 			page 55


 1726 0090 C046     		nop
 1727              	.LBE48:
 1728              	.LBE47:
 1729              		.loc 1 889 7
 1730 0092 FB68     		ldr	r3, [r7, #12]
 1731 0094 1B68     		ldr	r3, [r3]
 1732 0096 1A68     		ldr	r2, [r3]
 1733 0098 FB68     		ldr	r3, [r7, #12]
 1734 009a 1B68     		ldr	r3, [r3]
 1735 009c 1021     		movs	r1, #16
 1736 009e 0A43     		orrs	r2, r1
 1737 00a0 1A60     		str	r2, [r3]
 1738 00a2 3B6A     		ldr	r3, [r7, #32]
 1739 00a4 FB61     		str	r3, [r7, #28]
 1740              	.LBB49:
 1741              	.LBB50:
 481:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 1742              		.loc 2 481 3
 1743 00a6 FB69     		ldr	r3, [r7, #28]
 1744              		.syntax divided
 1745              	@ 481 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 1746 00a8 83F31088 		MSR primask, r3
 1747              	@ 0 "" 2
 1748              		.loc 2 482 1
 1749              		.thumb
 1750              		.syntax unified
 1751 00ac 03E0     		b	.L79
 1752              	.L77:
 1753              	.LBE50:
 1754              	.LBE49:
 1755              	.LBE44:
 890:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****     }
 891:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****     else
 892:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****     {
 893:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****       /* In case of errors already pending when reception is started,
 894:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****          Interrupts may have already been raised and lead to reception abortion.
 895:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****          (Overrun error for instance).
 896:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****          In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
 897:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****       status = HAL_ERROR;
 1756              		.loc 1 897 14
 1757 00ae 2723     		movs	r3, #39
 1758 00b0 FB18     		adds	r3, r7, r3
 1759 00b2 0122     		movs	r2, #1
 1760 00b4 1A70     		strb	r2, [r3]
 1761              	.L79:
 898:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****     }
 899:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c **** 
 900:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****     return status;
 1762              		.loc 1 900 12
 1763 00b6 2723     		movs	r3, #39
 1764 00b8 FB18     		adds	r3, r7, r3
 1765 00ba 1B78     		ldrb	r3, [r3]
 1766 00bc 00E0     		b	.L75
 1767              	.L72:
 901:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****   }
 902:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****   else
 903:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****   {
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\ccxzgcer.s 			page 56


 904:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****     return HAL_BUSY;
 1768              		.loc 1 904 12
 1769 00be 0223     		movs	r3, #2
 1770              	.L75:
 905:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****   }
 906:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c **** }
 1771              		.loc 1 906 1
 1772 00c0 1800     		movs	r0, r3
 1773 00c2 BD46     		mov	sp, r7
 1774 00c4 0AB0     		add	sp, sp, #40
 1775              		@ sp needed
 1776 00c6 80BD     		pop	{r7, pc}
 1777              		.cfi_endproc
 1778              	.LFE376:
 1780              		.section	.text.HAL_UARTEx_ReceiveToIdle_DMA,"ax",%progbits
 1781              		.align	1
 1782              		.global	HAL_UARTEx_ReceiveToIdle_DMA
 1783              		.syntax unified
 1784              		.code	16
 1785              		.thumb_func
 1787              	HAL_UARTEx_ReceiveToIdle_DMA:
 1788              	.LFB377:
 907:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c **** 
 908:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c **** /**
 909:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****   * @brief Receive an amount of data in DMA mode till either the expected number
 910:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****   *        of data is received or an IDLE event occurs.
 911:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****   * @note  Reception is initiated by this function call. Further progress of reception is achieved 
 912:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****   *        to DMA services, transferring automatically received data elements in user reception buf
 913:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****   *        calling registered callbacks at half/end of reception. UART IDLE events are also used to
 914:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****   *        reception phase as ended. In all cases, callback execution will indicate number of recei
 915:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****   * @note  When the UART parity is enabled (PCE = 1), the received data contain
 916:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****   *        the parity bit (MSB position).
 917:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****   * @note  When UART parity is not enabled (PCE = 0), and Word Length is configured to 9 bits (M1-M
 918:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****   *        the received data is handled as a set of uint16_t. In this case, Size must indicate the 
 919:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****   *        of uint16_t available through pData.
 920:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****   * @note  When UART parity is not enabled (PCE = 0), and Word Length is configured to 9 bits (M1-M
 921:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****   *        address of user data buffer for storing data to be received, should be aligned on a half
 922:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****   *        (16 bits) (as received data will be handled by DMA from halfword frontier). Depending on
 923:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****   *        use of specific alignment compilation directives or pragmas might be required
 924:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****   *        to ensure proper alignment for pData.
 925:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****   * @param huart UART handle.
 926:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****   * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
 927:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****   * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
 928:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****   * @retval HAL status
 929:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****   */
 930:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c **** HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t 
 931:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c **** {
 1789              		.loc 1 931 1
 1790              		.cfi_startproc
 1791              		@ args = 0, pretend = 0, frame = 40
 1792              		@ frame_needed = 1, uses_anonymous_args = 0
 1793 0000 B0B5     		push	{r4, r5, r7, lr}
 1794              	.LCFI42:
 1795              		.cfi_def_cfa_offset 16
 1796              		.cfi_offset 4, -16
 1797              		.cfi_offset 5, -12
 1798              		.cfi_offset 7, -8
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\ccxzgcer.s 			page 57


 1799              		.cfi_offset 14, -4
 1800 0002 8AB0     		sub	sp, sp, #40
 1801              	.LCFI43:
 1802              		.cfi_def_cfa_offset 56
 1803 0004 00AF     		add	r7, sp, #0
 1804              	.LCFI44:
 1805              		.cfi_def_cfa_register 7
 1806 0006 F860     		str	r0, [r7, #12]
 1807 0008 B960     		str	r1, [r7, #8]
 1808 000a BB1D     		adds	r3, r7, #6
 1809 000c 1A80     		strh	r2, [r3]
 932:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****   HAL_StatusTypeDef status;
 933:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c **** 
 934:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****   /* Check that a Rx process is not already ongoing */
 935:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****   if (huart->RxState == HAL_UART_STATE_READY)
 1810              		.loc 1 935 12
 1811 000e FB68     		ldr	r3, [r7, #12]
 1812 0010 8C22     		movs	r2, #140
 1813 0012 9B58     		ldr	r3, [r3, r2]
 1814              		.loc 1 935 6
 1815 0014 202B     		cmp	r3, #32
 1816 0016 56D1     		bne	.L81
 936:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****   {
 937:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****     if ((pData == NULL) || (Size == 0U))
 1817              		.loc 1 937 8
 1818 0018 BB68     		ldr	r3, [r7, #8]
 1819 001a 002B     		cmp	r3, #0
 1820 001c 03D0     		beq	.L82
 1821              		.loc 1 937 25 discriminator 1
 1822 001e BB1D     		adds	r3, r7, #6
 1823 0020 1B88     		ldrh	r3, [r3]
 1824 0022 002B     		cmp	r3, #0
 1825 0024 01D1     		bne	.L83
 1826              	.L82:
 938:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****     {
 939:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****       return HAL_ERROR;
 1827              		.loc 1 939 14
 1828 0026 0123     		movs	r3, #1
 1829 0028 4EE0     		b	.L84
 1830              	.L83:
 940:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****     }
 941:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c **** 
 942:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****     /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
 943:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****        should be aligned on a uint16_t frontier, as data copy from RDR will be
 944:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****        handled by DMA from a uint16_t frontier. */
 945:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****     if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 1831              		.loc 1 945 21
 1832 002a FB68     		ldr	r3, [r7, #12]
 1833 002c 9A68     		ldr	r2, [r3, #8]
 1834              		.loc 1 945 8
 1835 002e 8023     		movs	r3, #128
 1836 0030 5B01     		lsls	r3, r3, #5
 1837 0032 9A42     		cmp	r2, r3
 1838 0034 09D1     		bne	.L85
 1839              		.loc 1 945 71 discriminator 1
 1840 0036 FB68     		ldr	r3, [r7, #12]
 1841 0038 1B69     		ldr	r3, [r3, #16]
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\ccxzgcer.s 			page 58


 1842              		.loc 1 945 56 discriminator 1
 1843 003a 002B     		cmp	r3, #0
 1844 003c 05D1     		bne	.L85
 946:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****     {
 947:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****       if ((((uint32_t)pData) & 1U) != 0U)
 1845              		.loc 1 947 13
 1846 003e BB68     		ldr	r3, [r7, #8]
 1847              		.loc 1 947 30
 1848 0040 0122     		movs	r2, #1
 1849 0042 1340     		ands	r3, r2
 1850              		.loc 1 947 10
 1851 0044 01D0     		beq	.L85
 948:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****       {
 949:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****         return  HAL_ERROR;
 1852              		.loc 1 949 17
 1853 0046 0123     		movs	r3, #1
 1854 0048 3EE0     		b	.L84
 1855              	.L85:
 950:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****       }
 951:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****     }
 952:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c **** 
 953:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****     /* Set Reception type to reception till IDLE Event*/
 954:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****     huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 1856              		.loc 1 954 26
 1857 004a FB68     		ldr	r3, [r7, #12]
 1858 004c 0122     		movs	r2, #1
 1859 004e DA66     		str	r2, [r3, #108]
 955:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****     huart->RxEventType = HAL_UART_RXEVENT_TC;
 1860              		.loc 1 955 24
 1861 0050 FB68     		ldr	r3, [r7, #12]
 1862 0052 0022     		movs	r2, #0
 1863 0054 1A67     		str	r2, [r3, #112]
 956:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c **** 
 957:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****     status =  UART_Start_Receive_DMA(huart, pData, Size);
 1864              		.loc 1 957 15
 1865 0056 2725     		movs	r5, #39
 1866 0058 7C19     		adds	r4, r7, r5
 1867 005a BB1D     		adds	r3, r7, #6
 1868 005c 1A88     		ldrh	r2, [r3]
 1869 005e B968     		ldr	r1, [r7, #8]
 1870 0060 FB68     		ldr	r3, [r7, #12]
 1871 0062 1800     		movs	r0, r3
 1872 0064 FFF7FEFF 		bl	UART_Start_Receive_DMA
 1873 0068 0300     		movs	r3, r0
 1874 006a 2370     		strb	r3, [r4]
 958:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c **** 
 959:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****     /* Check Rx process has been successfully started */
 960:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****     if (status == HAL_OK)
 1875              		.loc 1 960 8
 1876 006c 7B19     		adds	r3, r7, r5
 1877 006e 1B78     		ldrb	r3, [r3]
 1878 0070 002B     		cmp	r3, #0
 1879 0072 24D1     		bne	.L86
 961:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****     {
 962:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****       if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 1880              		.loc 1 962 16
 1881 0074 FB68     		ldr	r3, [r7, #12]
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\ccxzgcer.s 			page 59


 1882 0076 DB6E     		ldr	r3, [r3, #108]
 1883              		.loc 1 962 10
 1884 0078 012B     		cmp	r3, #1
 1885 007a 1CD1     		bne	.L87
 963:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****       {
 964:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****         __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 1886              		.loc 1 964 9
 1887 007c FB68     		ldr	r3, [r7, #12]
 1888 007e 1B68     		ldr	r3, [r3]
 1889 0080 1022     		movs	r2, #16
 1890 0082 1A62     		str	r2, [r3, #32]
 1891              	.LBB51:
 1892              	.LBB52:
 1893              	.LBB53:
 453:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 1894              		.loc 2 453 3
 1895              		.syntax divided
 1896              	@ 453 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 1897 0084 EFF31083 		MRS r3, primask
 1898              	@ 0 "" 2
 1899              		.thumb
 1900              		.syntax unified
 1901 0088 7B61     		str	r3, [r7, #20]
 454:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 1902              		.loc 2 454 9
 1903 008a 7B69     		ldr	r3, [r7, #20]
 1904              	.LBE53:
 1905              	.LBE52:
 965:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****         ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 1906              		.loc 1 965 9
 1907 008c 3B62     		str	r3, [r7, #32]
 1908 008e 0123     		movs	r3, #1
 1909 0090 BB61     		str	r3, [r7, #24]
 1910              	.LBB54:
 1911              	.LBB55:
 481:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 1912              		.loc 2 481 3
 1913 0092 BB69     		ldr	r3, [r7, #24]
 1914              		.syntax divided
 1915              	@ 481 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 1916 0094 83F31088 		MSR primask, r3
 1917              	@ 0 "" 2
 1918              		.loc 2 482 1
 1919              		.thumb
 1920              		.syntax unified
 1921 0098 C046     		nop
 1922              	.LBE55:
 1923              	.LBE54:
 1924              		.loc 1 965 9
 1925 009a FB68     		ldr	r3, [r7, #12]
 1926 009c 1B68     		ldr	r3, [r3]
 1927 009e 1A68     		ldr	r2, [r3]
 1928 00a0 FB68     		ldr	r3, [r7, #12]
 1929 00a2 1B68     		ldr	r3, [r3]
 1930 00a4 1021     		movs	r1, #16
 1931 00a6 0A43     		orrs	r2, r1
 1932 00a8 1A60     		str	r2, [r3]
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\ccxzgcer.s 			page 60


 1933 00aa 3B6A     		ldr	r3, [r7, #32]
 1934 00ac FB61     		str	r3, [r7, #28]
 1935              	.LBB56:
 1936              	.LBB57:
 481:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 1937              		.loc 2 481 3
 1938 00ae FB69     		ldr	r3, [r7, #28]
 1939              		.syntax divided
 1940              	@ 481 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 1941 00b0 83F31088 		MSR primask, r3
 1942              	@ 0 "" 2
 1943              		.loc 2 482 1
 1944              		.thumb
 1945              		.syntax unified
 1946 00b4 03E0     		b	.L86
 1947              	.L87:
 1948              	.LBE57:
 1949              	.LBE56:
 1950              	.LBE51:
 966:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****       }
 967:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****       else
 968:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****       {
 969:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****         /* In case of errors already pending when reception is started,
 970:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****            Interrupts may have already been raised and lead to reception abortion.
 971:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****            (Overrun error for instance).
 972:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****            In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
 973:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****         status = HAL_ERROR;
 1951              		.loc 1 973 16
 1952 00b6 2723     		movs	r3, #39
 1953 00b8 FB18     		adds	r3, r7, r3
 1954 00ba 0122     		movs	r2, #1
 1955 00bc 1A70     		strb	r2, [r3]
 1956              	.L86:
 974:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****       }
 975:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****     }
 976:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c **** 
 977:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****     return status;
 1957              		.loc 1 977 12
 1958 00be 2723     		movs	r3, #39
 1959 00c0 FB18     		adds	r3, r7, r3
 1960 00c2 1B78     		ldrb	r3, [r3]
 1961 00c4 00E0     		b	.L84
 1962              	.L81:
 978:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****   }
 979:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****   else
 980:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****   {
 981:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****     return HAL_BUSY;
 1963              		.loc 1 981 12
 1964 00c6 0223     		movs	r3, #2
 1965              	.L84:
 982:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****   }
 983:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c **** }
 1966              		.loc 1 983 1
 1967 00c8 1800     		movs	r0, r3
 1968 00ca BD46     		mov	sp, r7
 1969 00cc 0AB0     		add	sp, sp, #40
 1970              		@ sp needed
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\ccxzgcer.s 			page 61


 1971 00ce B0BD     		pop	{r4, r5, r7, pc}
 1972              		.cfi_endproc
 1973              	.LFE377:
 1975              		.section	.text.HAL_UARTEx_GetRxEventType,"ax",%progbits
 1976              		.align	1
 1977              		.global	HAL_UARTEx_GetRxEventType
 1978              		.syntax unified
 1979              		.code	16
 1980              		.thumb_func
 1982              	HAL_UARTEx_GetRxEventType:
 1983              	.LFB378:
 984:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c **** 
 985:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c **** /**
 986:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****   * @brief Provide Rx Event type that has lead to RxEvent callback execution.
 987:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****   * @note  When HAL_UARTEx_ReceiveToIdle_IT() or HAL_UARTEx_ReceiveToIdle_DMA() API are called, pro
 988:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****   *        of reception process is provided to application through calls of Rx Event callback (eith
 989:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****   *        HAL_UARTEx_RxEventCallback() or user registered one). As several types of events could o
 990:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****   *        Half Transfer, or Transfer Complete), this function allows to retrieve the Rx Event type
 991:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****   *        to Rx Event callback execution.
 992:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****   * @note  This function is expected to be called within the user implementation of Rx Event Callba
 993:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****   *        in order to provide the accurate value :
 994:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****   *        In Interrupt Mode :
 995:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****   *           - HAL_UART_RXEVENT_TC : when Reception has been completed (expected nb of data has be
 996:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****   *           - HAL_UART_RXEVENT_IDLE : when Idle event occurred prior reception has been completed
 997:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****   *             received data is lower than expected one)
 998:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****   *        In DMA Mode :
 999:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****   *           - HAL_UART_RXEVENT_TC : when Reception has been completed (expected nb of data has be
1000:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****   *           - HAL_UART_RXEVENT_HT : when half of expected nb of data has been received
1001:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****   *           - HAL_UART_RXEVENT_IDLE : when Idle event occurred prior reception has been completed
1002:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****   *             received data is lower than expected one).
1003:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****   *        In DMA mode, RxEvent callback could be called several times;
1004:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****   *        When DMA is configured in Normal Mode, HT event does not stop Reception process;
1005:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****   *        When DMA is configured in Circular Mode, HT, TC or IDLE events don't stop Reception proc
1006:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****   * @param  huart UART handle.
1007:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****   * @retval Rx Event Type (return vale will be a value of @ref UART_RxEvent_Type_Values)
1008:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****   */
1009:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c **** HAL_UART_RxEventTypeTypeDef HAL_UARTEx_GetRxEventType(const UART_HandleTypeDef *huart)
1010:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c **** {
 1984              		.loc 1 1010 1
 1985              		.cfi_startproc
 1986              		@ args = 0, pretend = 0, frame = 8
 1987              		@ frame_needed = 1, uses_anonymous_args = 0
 1988 0000 80B5     		push	{r7, lr}
 1989              	.LCFI45:
 1990              		.cfi_def_cfa_offset 8
 1991              		.cfi_offset 7, -8
 1992              		.cfi_offset 14, -4
 1993 0002 82B0     		sub	sp, sp, #8
 1994              	.LCFI46:
 1995              		.cfi_def_cfa_offset 16
 1996 0004 00AF     		add	r7, sp, #0
 1997              	.LCFI47:
 1998              		.cfi_def_cfa_register 7
 1999 0006 7860     		str	r0, [r7, #4]
1011:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****   /* Return Rx Event type value, as stored in UART handle */
1012:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****   return (huart->RxEventType);
 2000              		.loc 1 1012 16
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\ccxzgcer.s 			page 62


 2001 0008 7B68     		ldr	r3, [r7, #4]
 2002 000a 1B6F     		ldr	r3, [r3, #112]
1013:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c **** }
 2003              		.loc 1 1013 1
 2004 000c 1800     		movs	r0, r3
 2005 000e BD46     		mov	sp, r7
 2006 0010 02B0     		add	sp, sp, #8
 2007              		@ sp needed
 2008 0012 80BD     		pop	{r7, pc}
 2009              		.cfi_endproc
 2010              	.LFE378:
 2012              		.section	.text.UARTEx_Wakeup_AddressConfig,"ax",%progbits
 2013              		.align	1
 2014              		.syntax unified
 2015              		.code	16
 2016              		.thumb_func
 2018              	UARTEx_Wakeup_AddressConfig:
 2019              	.LFB379:
1014:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c **** 
1015:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c **** /**
1016:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****   * @}
1017:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****   */
1018:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c **** 
1019:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c **** /**
1020:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****   * @}
1021:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****   */
1022:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c **** 
1023:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c **** /** @addtogroup UARTEx_Private_Functions
1024:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****   * @{
1025:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****   */
1026:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c **** 
1027:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c **** /**
1028:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****   * @brief Initialize the UART wake-up from stop mode parameters when triggered by address detectio
1029:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****   * @param huart           UART handle.
1030:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****   * @param WakeUpSelection UART wake up from stop mode parameters.
1031:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****   * @retval None
1032:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****   */
1033:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c **** static void UARTEx_Wakeup_AddressConfig(UART_HandleTypeDef *huart, UART_WakeUpTypeDef WakeUpSelecti
1034:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c **** {
 2020              		.loc 1 1034 1
 2021              		.cfi_startproc
 2022              		@ args = 0, pretend = 0, frame = 16
 2023              		@ frame_needed = 1, uses_anonymous_args = 0
 2024 0000 80B5     		push	{r7, lr}
 2025              	.LCFI48:
 2026              		.cfi_def_cfa_offset 8
 2027              		.cfi_offset 7, -8
 2028              		.cfi_offset 14, -4
 2029 0002 84B0     		sub	sp, sp, #16
 2030              	.LCFI49:
 2031              		.cfi_def_cfa_offset 24
 2032 0004 00AF     		add	r7, sp, #0
 2033              	.LCFI50:
 2034              		.cfi_def_cfa_register 7
 2035 0006 F860     		str	r0, [r7, #12]
 2036 0008 3B1D     		adds	r3, r7, #4
 2037 000a 1960     		str	r1, [r3]
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\ccxzgcer.s 			page 63


 2038 000c 5A60     		str	r2, [r3, #4]
1035:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****   assert_param(IS_UART_ADDRESSLENGTH_DETECT(WakeUpSelection.AddressLength));
1036:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c **** 
1037:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****   /* Set the USART address length */
1038:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****   MODIFY_REG(huart->Instance->CR2, USART_CR2_ADDM7, WakeUpSelection.AddressLength);
 2039              		.loc 1 1038 3
 2040 000e FB68     		ldr	r3, [r7, #12]
 2041 0010 1B68     		ldr	r3, [r3]
 2042 0012 5B68     		ldr	r3, [r3, #4]
 2043 0014 1022     		movs	r2, #16
 2044 0016 9343     		bics	r3, r2
 2045 0018 1A00     		movs	r2, r3
 2046 001a 3B1D     		adds	r3, r7, #4
 2047 001c 9B88     		ldrh	r3, [r3, #4]
 2048 001e 1900     		movs	r1, r3
 2049 0020 FB68     		ldr	r3, [r7, #12]
 2050 0022 1B68     		ldr	r3, [r3]
 2051 0024 0A43     		orrs	r2, r1
 2052 0026 5A60     		str	r2, [r3, #4]
1039:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c **** 
1040:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****   /* Set the USART address node */
1041:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****   MODIFY_REG(huart->Instance->CR2, USART_CR2_ADD, ((uint32_t)WakeUpSelection.Address << UART_CR2_AD
 2053              		.loc 1 1041 3
 2054 0028 FB68     		ldr	r3, [r7, #12]
 2055 002a 1B68     		ldr	r3, [r3]
 2056 002c 5B68     		ldr	r3, [r3, #4]
 2057 002e 1B02     		lsls	r3, r3, #8
 2058 0030 190A     		lsrs	r1, r3, #8
 2059 0032 3B1D     		adds	r3, r7, #4
 2060 0034 9B79     		ldrb	r3, [r3, #6]
 2061 0036 1A06     		lsls	r2, r3, #24
 2062 0038 FB68     		ldr	r3, [r7, #12]
 2063 003a 1B68     		ldr	r3, [r3]
 2064 003c 0A43     		orrs	r2, r1
 2065 003e 5A60     		str	r2, [r3, #4]
1042:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c **** }
 2066              		.loc 1 1042 1
 2067 0040 C046     		nop
 2068 0042 BD46     		mov	sp, r7
 2069 0044 04B0     		add	sp, sp, #16
 2070              		@ sp needed
 2071 0046 80BD     		pop	{r7, pc}
 2072              		.cfi_endproc
 2073              	.LFE379:
 2075              		.global	__aeabi_idiv
 2076              		.section	.text.UARTEx_SetNbDataToProcess,"ax",%progbits
 2077              		.align	1
 2078              		.syntax unified
 2079              		.code	16
 2080              		.thumb_func
 2082              	UARTEx_SetNbDataToProcess:
 2083              	.LFB380:
1043:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c **** 
1044:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c **** /**
1045:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****   * @brief Calculate the number of data to process in RX/TX ISR.
1046:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****   * @note The RX FIFO depth and the TX FIFO depth is extracted from
1047:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****   *       the UART configuration registers.
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\ccxzgcer.s 			page 64


1048:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****   * @param huart UART handle.
1049:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****   * @retval None
1050:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****   */
1051:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c **** static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
1052:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c **** {
 2084              		.loc 1 1052 1
 2085              		.cfi_startproc
 2086              		@ args = 0, pretend = 0, frame = 16
 2087              		@ frame_needed = 1, uses_anonymous_args = 0
 2088 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 2089              	.LCFI51:
 2090              		.cfi_def_cfa_offset 20
 2091              		.cfi_offset 4, -20
 2092              		.cfi_offset 5, -16
 2093              		.cfi_offset 6, -12
 2094              		.cfi_offset 7, -8
 2095              		.cfi_offset 14, -4
 2096 0002 85B0     		sub	sp, sp, #20
 2097              	.LCFI52:
 2098              		.cfi_def_cfa_offset 40
 2099 0004 00AF     		add	r7, sp, #0
 2100              	.LCFI53:
 2101              		.cfi_def_cfa_register 7
 2102 0006 7860     		str	r0, [r7, #4]
1053:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****   uint8_t rx_fifo_depth;
1054:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****   uint8_t tx_fifo_depth;
1055:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****   uint8_t rx_fifo_threshold;
1056:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****   uint8_t tx_fifo_threshold;
1057:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****   static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
1058:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****   static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
1059:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c **** 
1060:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****   if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 2103              		.loc 1 1060 12
 2104 0008 7B68     		ldr	r3, [r7, #4]
 2105 000a 5B6E     		ldr	r3, [r3, #100]
 2106              		.loc 1 1060 6
 2107 000c 002B     		cmp	r3, #0
 2108 000e 08D1     		bne	.L93
1061:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****   {
1062:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****     huart->NbTxDataToProcess = 1U;
 2109              		.loc 1 1062 30
 2110 0010 7B68     		ldr	r3, [r7, #4]
 2111 0012 6A22     		movs	r2, #106
 2112 0014 0121     		movs	r1, #1
 2113 0016 9952     		strh	r1, [r3, r2]
1063:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****     huart->NbRxDataToProcess = 1U;
 2114              		.loc 1 1063 30
 2115 0018 7B68     		ldr	r3, [r7, #4]
 2116 001a 6822     		movs	r2, #104
 2117 001c 0121     		movs	r1, #1
 2118 001e 9952     		strh	r1, [r3, r2]
1064:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****   }
1065:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****   else
1066:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****   {
1067:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****     rx_fifo_depth = RX_FIFO_DEPTH;
1068:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****     tx_fifo_depth = TX_FIFO_DEPTH;
1069:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****     rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RX
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\ccxzgcer.s 			page 65


1070:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****     tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TX
1071:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****     huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
1072:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****                                (uint16_t)denominator[tx_fifo_threshold];
1073:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****     huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
1074:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****                                (uint16_t)denominator[rx_fifo_threshold];
1075:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****   }
1076:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c **** }
 2119              		.loc 1 1076 1
 2120 0020 43E0     		b	.L95
 2121              	.L93:
1067:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****     tx_fifo_depth = TX_FIFO_DEPTH;
 2122              		.loc 1 1067 19
 2123 0022 0F26     		movs	r6, #15
 2124 0024 BB19     		adds	r3, r7, r6
 2125 0026 0822     		movs	r2, #8
 2126 0028 1A70     		strb	r2, [r3]
1068:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****     rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RX
 2127              		.loc 1 1068 19
 2128 002a 0E20     		movs	r0, #14
 2129 002c 3B18     		adds	r3, r7, r0
 2130 002e 0822     		movs	r2, #8
 2131 0030 1A70     		strb	r2, [r3]
1069:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****     tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TX
 2132              		.loc 1 1069 35
 2133 0032 7B68     		ldr	r3, [r7, #4]
 2134 0034 1B68     		ldr	r3, [r3]
 2135 0036 9B68     		ldr	r3, [r3, #8]
1069:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****     tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TX
 2136              		.loc 1 1069 85
 2137 0038 5B0E     		lsrs	r3, r3, #25
1069:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****     tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TX
 2138              		.loc 1 1069 25
 2139 003a DAB2     		uxtb	r2, r3
1069:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****     tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TX
 2140              		.loc 1 1069 23
 2141 003c 0D24     		movs	r4, #13
 2142 003e 3B19     		adds	r3, r7, r4
 2143 0040 0721     		movs	r1, #7
 2144 0042 0A40     		ands	r2, r1
 2145 0044 1A70     		strb	r2, [r3]
1070:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****     huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 2146              		.loc 1 1070 35
 2147 0046 7B68     		ldr	r3, [r7, #4]
 2148 0048 1B68     		ldr	r3, [r3]
 2149 004a 9B68     		ldr	r3, [r3, #8]
1070:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****     huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 2150              		.loc 1 1070 85
 2151 004c 5B0F     		lsrs	r3, r3, #29
1070:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****     huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 2152              		.loc 1 1070 25
 2153 004e DAB2     		uxtb	r2, r3
1070:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****     huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 2154              		.loc 1 1070 23
 2155 0050 0C25     		movs	r5, #12
 2156 0052 7B19     		adds	r3, r7, r5
 2157 0054 0721     		movs	r1, #7
 2158 0056 0A40     		ands	r2, r1
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\ccxzgcer.s 			page 66


 2159 0058 1A70     		strb	r2, [r3]
1071:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****                                (uint16_t)denominator[tx_fifo_threshold];
 2160              		.loc 1 1071 33
 2161 005a 3B18     		adds	r3, r7, r0
 2162 005c 1B78     		ldrb	r3, [r3]
1071:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****                                (uint16_t)denominator[tx_fifo_threshold];
 2163              		.loc 1 1071 68
 2164 005e 7A19     		adds	r2, r7, r5
 2165 0060 1278     		ldrb	r2, [r2]
 2166 0062 1449     		ldr	r1, .L96
 2167 0064 8A5C     		ldrb	r2, [r1, r2]
1071:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****                                (uint16_t)denominator[tx_fifo_threshold];
 2168              		.loc 1 1071 57
 2169 0066 5A43     		muls	r2, r3
 2170 0068 1000     		movs	r0, r2
1072:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****     huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 2171              		.loc 1 1072 53
 2172 006a 7B19     		adds	r3, r7, r5
 2173 006c 1B78     		ldrb	r3, [r3]
 2174 006e 124A     		ldr	r2, .L96+4
 2175 0070 D35C     		ldrb	r3, [r2, r3]
1071:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****                                (uint16_t)denominator[tx_fifo_threshold];
 2176              		.loc 1 1071 89
 2177 0072 1900     		movs	r1, r3
 2178 0074 FFF7FEFF 		bl	__aeabi_idiv
 2179 0078 0300     		movs	r3, r0
1071:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****                                (uint16_t)denominator[tx_fifo_threshold];
 2180              		.loc 1 1071 30
 2181 007a 99B2     		uxth	r1, r3
 2182 007c 7B68     		ldr	r3, [r7, #4]
 2183 007e 6A22     		movs	r2, #106
 2184 0080 9952     		strh	r1, [r3, r2]
1073:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****                                (uint16_t)denominator[rx_fifo_threshold];
 2185              		.loc 1 1073 33
 2186 0082 BB19     		adds	r3, r7, r6
 2187 0084 1B78     		ldrb	r3, [r3]
1073:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****                                (uint16_t)denominator[rx_fifo_threshold];
 2188              		.loc 1 1073 68
 2189 0086 3A19     		adds	r2, r7, r4
 2190 0088 1278     		ldrb	r2, [r2]
 2191 008a 0A49     		ldr	r1, .L96
 2192 008c 8A5C     		ldrb	r2, [r1, r2]
1073:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****                                (uint16_t)denominator[rx_fifo_threshold];
 2193              		.loc 1 1073 57
 2194 008e 5A43     		muls	r2, r3
 2195 0090 1000     		movs	r0, r2
1074:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****   }
 2196              		.loc 1 1074 53
 2197 0092 3B19     		adds	r3, r7, r4
 2198 0094 1B78     		ldrb	r3, [r3]
 2199 0096 084A     		ldr	r2, .L96+4
 2200 0098 D35C     		ldrb	r3, [r2, r3]
1073:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****                                (uint16_t)denominator[rx_fifo_threshold];
 2201              		.loc 1 1073 89
 2202 009a 1900     		movs	r1, r3
 2203 009c FFF7FEFF 		bl	__aeabi_idiv
 2204 00a0 0300     		movs	r3, r0
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\ccxzgcer.s 			page 67


1073:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c ****                                (uint16_t)denominator[rx_fifo_threshold];
 2205              		.loc 1 1073 30
 2206 00a2 99B2     		uxth	r1, r3
 2207 00a4 7B68     		ldr	r3, [r7, #4]
 2208 00a6 6822     		movs	r2, #104
 2209 00a8 9952     		strh	r1, [r3, r2]
 2210              	.L95:
 2211              		.loc 1 1076 1
 2212 00aa C046     		nop
 2213 00ac BD46     		mov	sp, r7
 2214 00ae 05B0     		add	sp, sp, #20
 2215              		@ sp needed
 2216 00b0 F0BD     		pop	{r4, r5, r6, r7, pc}
 2217              	.L97:
 2218 00b2 C046     		.align	2
 2219              	.L96:
 2220 00b4 00000000 		.word	numerator.1
 2221 00b8 00000000 		.word	denominator.0
 2222              		.cfi_endproc
 2223              	.LFE380:
 2225              		.section	.rodata.numerator.1,"a"
 2226              		.align	2
 2229              	numerator.1:
 2230 0000 01010103 		.ascii	"\001\001\001\003\007\001\000\000"
 2230      07010000 
 2231              		.section	.rodata.denominator.0,"a"
 2232              		.align	2
 2235              	denominator.0:
 2236 0000 08040204 		.ascii	"\010\004\002\004\010\001\001\001"
 2236      08010101 
 2237              		.text
 2238              	.Letext0:
 2239              		.file 3 "c:\\users\\administrator\\documents\\toolstm\\arm\\arm-none-eabi\\include\\machine\\_defa
 2240              		.file 4 "c:\\users\\administrator\\documents\\toolstm\\arm\\arm-none-eabi\\include\\sys\\_stdint.h
 2241              		.file 5 "Drivers/CMSIS/Device/ST/STM32G0xx/Include/stm32g0b1xx.h"
 2242              		.file 6 "Drivers/CMSIS/Device/ST/STM32G0xx/Include/stm32g0xx.h"
 2243              		.file 7 "Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_hal_def.h"
 2244              		.file 8 "Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_hal_dma.h"
 2245              		.file 9 "Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_hal_uart.h"
 2246              		.file 10 "Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_hal_uart_ex.h"
 2247              		.file 11 "Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h"
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\ccxzgcer.s 			page 68


DEFINED SYMBOLS
                            *ABS*:00000000 stm32g0xx_hal_uart_ex.c
C:\Users\ADMINI~1\AppData\Local\Temp\ccxzgcer.s:18     .rodata.CHANNEL_OFFSET_TAB:00000000 $d
C:\Users\ADMINI~1\AppData\Local\Temp\ccxzgcer.s:21     .rodata.CHANNEL_OFFSET_TAB:00000000 CHANNEL_OFFSET_TAB
C:\Users\ADMINI~1\AppData\Local\Temp\ccxzgcer.s:24     .text.HAL_RS485Ex_Init:00000000 $t
C:\Users\ADMINI~1\AppData\Local\Temp\ccxzgcer.s:30     .text.HAL_RS485Ex_Init:00000000 HAL_RS485Ex_Init
C:\Users\ADMINI~1\AppData\Local\Temp\ccxzgcer.s:183    .text.HAL_RS485Ex_Init:000000dc $d
C:\Users\ADMINI~1\AppData\Local\Temp\ccxzgcer.s:189    .text.HAL_UARTEx_WakeupCallback:00000000 $t
C:\Users\ADMINI~1\AppData\Local\Temp\ccxzgcer.s:195    .text.HAL_UARTEx_WakeupCallback:00000000 HAL_UARTEx_WakeupCallback
C:\Users\ADMINI~1\AppData\Local\Temp\ccxzgcer.s:223    .text.HAL_UARTEx_RxFifoFullCallback:00000000 $t
C:\Users\ADMINI~1\AppData\Local\Temp\ccxzgcer.s:229    .text.HAL_UARTEx_RxFifoFullCallback:00000000 HAL_UARTEx_RxFifoFullCallback
C:\Users\ADMINI~1\AppData\Local\Temp\ccxzgcer.s:257    .text.HAL_UARTEx_TxFifoEmptyCallback:00000000 $t
C:\Users\ADMINI~1\AppData\Local\Temp\ccxzgcer.s:263    .text.HAL_UARTEx_TxFifoEmptyCallback:00000000 HAL_UARTEx_TxFifoEmptyCallback
C:\Users\ADMINI~1\AppData\Local\Temp\ccxzgcer.s:291    .text.HAL_MultiProcessorEx_AddressLength_Set:00000000 $t
C:\Users\ADMINI~1\AppData\Local\Temp\ccxzgcer.s:297    .text.HAL_MultiProcessorEx_AddressLength_Set:00000000 HAL_MultiProcessorEx_AddressLength_Set
C:\Users\ADMINI~1\AppData\Local\Temp\ccxzgcer.s:375    .text.HAL_UARTEx_StopModeWakeUpSourceConfig:00000000 $t
C:\Users\ADMINI~1\AppData\Local\Temp\ccxzgcer.s:381    .text.HAL_UARTEx_StopModeWakeUpSourceConfig:00000000 HAL_UARTEx_StopModeWakeUpSourceConfig
C:\Users\ADMINI~1\AppData\Local\Temp\ccxzgcer.s:2018   .text.UARTEx_Wakeup_AddressConfig:00000000 UARTEx_Wakeup_AddressConfig
C:\Users\ADMINI~1\AppData\Local\Temp\ccxzgcer.s:519    .text.HAL_UARTEx_StopModeWakeUpSourceConfig:000000c8 $d
C:\Users\ADMINI~1\AppData\Local\Temp\ccxzgcer.s:525    .text.HAL_UARTEx_EnableStopMode:00000000 $t
C:\Users\ADMINI~1\AppData\Local\Temp\ccxzgcer.s:531    .text.HAL_UARTEx_EnableStopMode:00000000 HAL_UARTEx_EnableStopMode
C:\Users\ADMINI~1\AppData\Local\Temp\ccxzgcer.s:642    .text.HAL_UARTEx_DisableStopMode:00000000 $t
C:\Users\ADMINI~1\AppData\Local\Temp\ccxzgcer.s:648    .text.HAL_UARTEx_DisableStopMode:00000000 HAL_UARTEx_DisableStopMode
C:\Users\ADMINI~1\AppData\Local\Temp\ccxzgcer.s:758    .text.HAL_UARTEx_EnableFifoMode:00000000 $t
C:\Users\ADMINI~1\AppData\Local\Temp\ccxzgcer.s:764    .text.HAL_UARTEx_EnableFifoMode:00000000 HAL_UARTEx_EnableFifoMode
C:\Users\ADMINI~1\AppData\Local\Temp\ccxzgcer.s:2082   .text.UARTEx_SetNbDataToProcess:00000000 UARTEx_SetNbDataToProcess
C:\Users\ADMINI~1\AppData\Local\Temp\ccxzgcer.s:860    .text.HAL_UARTEx_DisableFifoMode:00000000 $t
C:\Users\ADMINI~1\AppData\Local\Temp\ccxzgcer.s:866    .text.HAL_UARTEx_DisableFifoMode:00000000 HAL_UARTEx_DisableFifoMode
C:\Users\ADMINI~1\AppData\Local\Temp\ccxzgcer.s:955    .text.HAL_UARTEx_DisableFifoMode:00000070 $d
C:\Users\ADMINI~1\AppData\Local\Temp\ccxzgcer.s:960    .text.HAL_UARTEx_SetTxFifoThreshold:00000000 $t
C:\Users\ADMINI~1\AppData\Local\Temp\ccxzgcer.s:966    .text.HAL_UARTEx_SetTxFifoThreshold:00000000 HAL_UARTEx_SetTxFifoThreshold
C:\Users\ADMINI~1\AppData\Local\Temp\ccxzgcer.s:1063   .text.HAL_UARTEx_SetRxFifoThreshold:00000000 $t
C:\Users\ADMINI~1\AppData\Local\Temp\ccxzgcer.s:1069   .text.HAL_UARTEx_SetRxFifoThreshold:00000000 HAL_UARTEx_SetRxFifoThreshold
C:\Users\ADMINI~1\AppData\Local\Temp\ccxzgcer.s:1166   .text.HAL_UARTEx_SetRxFifoThreshold:00000080 $d
C:\Users\ADMINI~1\AppData\Local\Temp\ccxzgcer.s:1171   .text.HAL_UARTEx_ReceiveToIdle:00000000 $t
C:\Users\ADMINI~1\AppData\Local\Temp\ccxzgcer.s:1177   .text.HAL_UARTEx_ReceiveToIdle:00000000 HAL_UARTEx_ReceiveToIdle
C:\Users\ADMINI~1\AppData\Local\Temp\ccxzgcer.s:1587   .text.HAL_UARTEx_ReceiveToIdle:0000023c $d
C:\Users\ADMINI~1\AppData\Local\Temp\ccxzgcer.s:1592   .text.HAL_UARTEx_ReceiveToIdle_IT:00000000 $t
C:\Users\ADMINI~1\AppData\Local\Temp\ccxzgcer.s:1598   .text.HAL_UARTEx_ReceiveToIdle_IT:00000000 HAL_UARTEx_ReceiveToIdle_IT
C:\Users\ADMINI~1\AppData\Local\Temp\ccxzgcer.s:1781   .text.HAL_UARTEx_ReceiveToIdle_DMA:00000000 $t
C:\Users\ADMINI~1\AppData\Local\Temp\ccxzgcer.s:1787   .text.HAL_UARTEx_ReceiveToIdle_DMA:00000000 HAL_UARTEx_ReceiveToIdle_DMA
C:\Users\ADMINI~1\AppData\Local\Temp\ccxzgcer.s:1976   .text.HAL_UARTEx_GetRxEventType:00000000 $t
C:\Users\ADMINI~1\AppData\Local\Temp\ccxzgcer.s:1982   .text.HAL_UARTEx_GetRxEventType:00000000 HAL_UARTEx_GetRxEventType
C:\Users\ADMINI~1\AppData\Local\Temp\ccxzgcer.s:2013   .text.UARTEx_Wakeup_AddressConfig:00000000 $t
C:\Users\ADMINI~1\AppData\Local\Temp\ccxzgcer.s:2077   .text.UARTEx_SetNbDataToProcess:00000000 $t
C:\Users\ADMINI~1\AppData\Local\Temp\ccxzgcer.s:2220   .text.UARTEx_SetNbDataToProcess:000000b4 $d
C:\Users\ADMINI~1\AppData\Local\Temp\ccxzgcer.s:2229   .rodata.numerator.1:00000000 numerator.1
C:\Users\ADMINI~1\AppData\Local\Temp\ccxzgcer.s:2235   .rodata.denominator.0:00000000 denominator.0
C:\Users\ADMINI~1\AppData\Local\Temp\ccxzgcer.s:2226   .rodata.numerator.1:00000000 $d
C:\Users\ADMINI~1\AppData\Local\Temp\ccxzgcer.s:2232   .rodata.denominator.0:00000000 $d

UNDEFINED SYMBOLS
HAL_UART_MspInit
UART_AdvFeatureConfig
UART_SetConfig
UART_CheckIdleState
HAL_GetTick
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\ccxzgcer.s 			page 69


UART_WaitOnFlagUntilTimeout
UART_Start_Receive_IT
UART_Start_Receive_DMA
__aeabi_idiv
